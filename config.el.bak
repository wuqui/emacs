(setq user-full-name "Quirin WÃ¼rschinger"
      user-mail-address "q.wuerschinger@gmail.com")

(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)

(setq doom-font (font-spec :family "monospace" :size 18))

(defhydra hydra-zoom ()
  "zoom"
  ("k" text-scale-increase "in")
  ("j" text-scale-decrease "out"))

(map!
 :leader
 :desc "zoom hydra" "f s" #'hydra-zoom/body
 )

(map!
 :leader
 :desc "toggle modeline" "t m" #'doom-modeline-mode)

(defun clone-indirect-buffer-other-frame (newname display-flag &optional norecord)
  "Like `clone-indirect-buffer' but display in another window."
  (interactive
   (progn
     (if (get major-mode 'no-clone-indirect)
         (error "Cannot indirectly clone a buffer in %s mode" mode-name))
     (list (if current-prefix-arg
               (read-buffer "Name of indirect buffer: " (current-buffer)))
           t)))
  ;; (let ((pop-up-windows t))
  (let ((pop-up-frames t)) ; <==========
    (clone-indirect-buffer newname display-flag norecord)))

(map!
 :leader
 :desc "switch frames" "f o" #'other-frame)

(map!
 :leader
 :desc "kill buffer and window" "b D" #'kill-buffer-and-window)

(map!
 :leader
 :desc "helm-buffers-list" "b h" #'helm-buffers-list)

(map!
 :leader
 :desc "copy file here" "a c" #'copy-file)

(map!
 :leader
 :desc "move file (here)" "a m" #'rename-file)

(defhydra my-mc-hydra (:color pink
                       :hint nil
                       :pre (evil-mc-pause-cursors))
  "
^Match^            ^Line-wise^           ^Manual^
^^^^^^----------------------------------------------------
_Z_: match all     _J_: make & go down   _z_: toggle here
_m_: make & next   _K_: make & go up     _r_: remove last
_M_: make & prev   ^ ^                   _R_: remove all
_n_: skip & next   ^ ^                   _p_: pause/resume
_N_: skip & prev

Current pattern: %`evil-mc-pattern

"
  ("Z" #'evil-mc-make-all-cursors)
  ("m" #'evil-mc-make-and-goto-next-match)
  ("M" #'evil-mc-make-and-goto-prev-match)
  ("n" #'evil-mc-skip-and-goto-next-match)
  ("N" #'evil-mc-skip-and-goto-prev-match)
  ("J" #'evil-mc-make-cursor-move-next-line)
  ("K" #'evil-mc-make-cursor-move-prev-line)
  ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
  ("r" #'+multiple-cursors/evil-mc-undo-cursor)
  ("R" #'evil-mc-undo-all-cursors)
  ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
  ("q" #'evil-mc-resume-cursors "quit" :color blue)
  ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))

(map!
 (:when (featurep! :editor multiple-cursors)
  :prefix "g"
  :nv "z" #'my-mc-hydra/body))

(map!
 :leader
 :desc "dired narrow" "a d n" #'dired-narrow)

(map!
 :leader
 :prefix "a d"
 :desc "open home" "h" (lambda () (interactive) (find-file "~"))
 :desc "open Desktop" "d" (lambda () (interactive) (find-file "~/Desktop"))
 :desc "open promo" "p" (lambda () (interactive) (find-file "~/promo"))
 :desc "open Lehre" "l" (lambda () (interactive) (find-file "~/promo/lehre"))
 :desc "open bib/pdfs" "b" (lambda () (interactive) (find-file "~/promo/bib/pdfs"))
 :desc "open Volumes" "v" (lambda () (interactive) (find-file "/Volumes"))
 :desc "open orgzly" "o" (lambda () (interactive) (find-file "~/Dropbox/orgzly"))
 )

(defun q/dired-copy-filename-as-kill ()
  (interactive)
  (let
      ((current-prefix-arg '(0)))
    (call-interactively 'dired-copy-filename-as-kill)))

(map!
 :leader
 :desc "copy full file path" "a d y" #'q/dired-copy-filename-as-kill
 )

(after! projectile
  (setq projectile-known-projects '(
                                    ;; private
                                    "~/.doom.d/"
                                    "~/org/"
                                    "~/roam/"
                                    "~/temp/latex/"
                                    "~/Dropbox/orgzly/"

                                    ;; teaching
                                    "~/promo/lehre/2020-21_ue_morph-wf/"
                                    "~/promo/lehre/2021_ps_itl/"
                                    "~/promo/lehre/2021_sem_lexical-innovation/"
                                    "~/promo/lehre/2021_ue_social-media/"
                                    "~/promo/lehre/2021_vl_dh/"

                                    ;; projects
                                    "~/promo/neocrawler/"
                                    "~/promo/sna/"
                                    "~/promo/AngloSaxon/"
                                    "~/promo/socemb/"
                                    "~/promo/NeoCov/"
                                    )))

(map!
 :leader
 :desc "switch workspace" "y" #'+workspace/switch-to)

(setq org-directory "~/org/")

(after! org
  (setq org-startup-folded t))

(defun org-show-current-heading-tidily ()
  (interactive)  ;Inteactive
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-back-to-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

(after! org
  (map!
   :leader
   :desc "fold other trees" "a f" #'org-show-current-heading-tidily))

(after! org
  (setq org-agenda-files (list
                          "~/.doom.d/config.org"
                          "~/org/temp.org"

                          ;; projects
                          "~/promo/sna/sna.org"
                          "~/promo/haiku/haiku.org"
                          "~/promo/IndVarBNC/IndVarBNC.org"
                          "~/promo/AngloSaxon/AngloSaxon.org"
                          "~/promo/socemb/socemb.org"
                          "~/promo/CoVid/CoVid.org"

                          ;; ongoing
                          "~/org/work.org"
                          "~/promo/lehrveranstaltungen/2021_os_english-linguistics/2021_os_english-linguistics.org"

                          ;; teaching
                          "~/promo/lehre/2020-21_ps_itl/itl202021.org"
                          "~/promo/lehre/2020-21_ue_morph-wf/morph-wf_2020-21.org"
                          "~/promo/lehre/2021_ps_itl/"
                          "~/promo/lehre/2021_sem_lexical-innovation/"
                          "~/promo/lehre/2021_ue_social-media/"

                          ;; private
                          "~/Dropbox/orgzly/mobin.org"
                          "~/org/rout.org"
                          "~/org/privat.org"
                          )
        )
  )

(setq org-agenda-archives-mode 't)

(setq org-agenda-sorting-strategy
      '(
        (agenda habit-down time-up priority-down)
        (todo priority-down category-keep)
        (tags priority-down category-keep)
        (search category-keep)
        )
      )

(after! org
  (defun q/org-agenda ()
    "My personal agenda view."
    (interactive)
    (setq org-agenda-start-with-log-mode t)
    (org-agenda nil "a")
    (org-agenda-day-view)
    (org-agenda-goto-today)
    )

  (map! :leader
        :desc "q agenda" "a q" #'q/org-agenda)
  )

(after! org
  (setq org-log-into-drawer t))

(after! org
  (setq org-clock-into-drawer "CLOCKBOOK"))

(defun clocktable-by-tag/shift-cell (n)
  (let ((str ""))
    (dotimes (i n)
      (setq str (concat str "| ")))
    str))

(defun clocktable-by-tag/insert-tag (params)
  (let ((tag (plist-get params :tags)))
    (insert "|--\n")
    (insert (format "| %s | *Tag time* |\n" tag))
    (let ((total 0))
      (mapcar
       (lambda (file)
         (let ((clock-data (with-current-buffer (find-file-noselect file)
                             (org-clock-get-table-data (buffer-name) params))))
           (when (> (nth 1 clock-data) 0)
             (setq total (+ total (nth 1 clock-data)))
             (insert (format "| | File *%s* | %.2f |\n"
                             (file-name-nondirectory file)
                             (/ (nth 1 clock-data) 60.0)))
             (dolist (entry (nth 2 clock-data))
               (insert (format "| | . %s%s | %s %.2f |\n"
                               (org-clocktable-indent-string (nth 0 entry))
                               (nth 1 entry)
                               (clocktable-by-tag/shift-cell (nth 0 entry))
                               (/ (nth 4 entry) 60.0)))))))
       (org-agenda-files))
      (save-excursion
        (re-search-backward "*Tag time*")
        (org-table-next-field)
        (org-table-blank-field)
        (insert (format "*%.2f*" (/ total 60.0)))))
    (org-table-align)))

(defun org-dblock-write:clocktable-by-tag (params)
  (insert "| Tag | Headline | Time (h) |\n")
  (insert "|     |          | <r>  |\n")
  (let ((tags (plist-get params :tags)))
    (mapcar (lambda (tag)
              (clocktable-by-tag/insert-tag (plist-put (plist-put params :match tag) :tags tag)))
            tags)))

(after! org
  (setq org-agenda-skip-scheduled-if-done t))

(setq org-agenda-show-future-repeats nil)

(setq org-highest-priority 1)
(setq org-default-priority 5)
(setq org-lowest-priority 9)

(defun q/insert-timestamp-inactive ()
  (interactive)
  (let ((current-prefix-arg '(16)))
    (call-interactively 'org-time-stamp-inactive)))

(map!
 :leader
 :desc "timestamp" "i t" #'q/insert-timestamp-inactive
 )

(map!
 :leader
 :desc "datestamp" "i d" #'org-time-stamp-inactive)

(defun q/insert-file-link ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'org-insert-link)))

(map!
 :leader
 :desc "insert file link" "l" #'q/insert-file-link)

(defun my-counsel-insert-file-path ()
  "Insert file path."
  (interactive)
  (unless (featurep 'counsel) (require 'counsel))
  (ivy-read "Find file: " 'read-file-name-internal
            :matcher #'counsel--find-file-matcher
            :action
            (lambda (x)
              (insert x))))

(map!
 :leader
 :desc "insert file path" "L" #'my-counsel-insert-file-path)

(defun q/toggle-checkbox ()
  (interactive)
  (let
      ((current-prefix-arg '(4)))
    (call-interactively 'org-toggle-checkbox)))

(map!
 :leader
 :desc "insert checkbox" "c h" #'q/toggle-checkbox)

(map!
 :leader
 :desc "org-mark-subtree" "m s v" #'org-mark-subtree)

(map!
 :leader
 :desc "org-copy-subtree" "m s y" #'org-copy-subtree)

(map!
 :leader
 :desc "org-paste-subtree" "m s p" #'org-paste-subtree)

(map!
 :leader
 :desc "org-paste-subtree" "m s w" #'widen)

(setq org-image-actual-width (/ (display-pixel-width) 3))

(after! org
  (setq org-image-actual-width '(300))
  )

(defun org-export-filter-timestamp-remove-brackets (timestamp backend info)
  "removes relevant brackets from a timestamp"
  (cond
   ((org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "[<>]\\|[][]" "" timestamp))
   ((org-export-derived-backend-p backend 'html)
    (replace-regexp-in-string "&[lg]t;\\|[][]" "" timestamp))
   )
  )

(eval-after-load 'ox '(add-to-list
                       'org-export-filter-timestamp-functions
                       'org-export-filter-timestamp-remove-brackets))

(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("koma-article" "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

(after! org
  (setq org-latex-tables-booktabs t))

(setq org-latex-listings 'listings)

(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))

(use-package ox-word)

(setq org-odt-preferred-output-format "docx")

(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode))
:config
(setq orb-templates
      '(
        ("r" "ref" plain (function org-roam-capture--get-point) ""
         :file-name "${citekey}"
         :head "#+TITLE: ${citekey}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS: " ; <--
         :unnarrowed t
         )
        )
      )

(setq org-noter-notes-window-location 'other-frame)

(defun org-noter-insert-selected-text-inside-note-content ()
  (interactive)
  (progn (setq currenb (buffer-name))
         (org-noter-insert-precise-note)
         (set-buffer currenb)
         (org-noter-insert-note)))

(map!
 :leader
 :desc "copy text as note" "d q" #'org-noter-insert-selected-text-inside-note-content)

(fset 'org-noter-wrap-quote
      (kmacro-lambda-form [?  ?: ?j ?o ?i ?n ?e ?  backspace backspace return ?V ?  ?i ?s ?q ?u ?o ?t ?e return escape ?\{ ?\{ ?d ?d] 0 "%d"))

(map!
 :leader
 :desc "wrap extracted text in quote block" "d w" #'org-noter-wrap-quote)

(require 'org-transclusion)

(set-face-attribute
 'org-transclusion-fringe nil
 :foreground "#999966"
 :background "#999966")

(set-face-attribute
 'org-transclusion-source-fringe nil
 :foreground "#999966"
 :background "#999966")

(after! org
  (advice-remove 'org-link-search '+org--recenter-after-follow-link-a))

(use-package! org-download
  :after org
  :config
    (setq-default org-download-image-dir "./img/")
  )

(let (
      (org-super-agenda-groups
       '((:auto-parent t))
       ))
  (org-agenda-list))

(setq org-super-agenda-header-map evil-org-agenda-mode-map)

(use-package! deft
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/org/roam/"))

(after! helm-bibtex
  (setq bibtex-completion-bibliography '("~/promo/bib/references.bib"))
  (map!
   :leader
   :desc "bibliography" "a b" #'helm-bibtex))

(after! latex
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  )

(after! latex
  (defun framesMenus-display-buffer-use-some-frame (fun &rest args)
    "Use `display-buffer-use-some-frame' as `display-buffer-overriding-action'.
Then run FUN with ARGS."
    (let ((display-buffer-overriding-action '(display-buffer-use-some-frame)))
      (apply fun args)))

  (advice-add 'TeX-pdf-tools-sync-view :around #'framesMenus-display-buffer-use-some-frame)
  (advice-add 'pdf-sync-backward-search-mouse :around #'framesMenus-display-buffer-use-some-frame)
  )

(map!
 :leader
 :desc "reftex-toc" "a t" #'reftex-toc)

(after! latex
  (setq TeX-outline-extra
        '(
          (".*%chapter" 1)
          (".*%section" 2)
          (".*%subsection" 3)
          (".*%subsubsection" 4)
          (".*%paragraph" 5)
          ("[ \t]*\\\\question\\b" 2)
          ("[ \t]*\\\\part\\b" 3)
          )))

(after! latex
  (font-lock-add-keywords
   'latex-mode
   '((".*%\\(chapter\\|\\(sub\\|subsub\\)?section\\|paragraph\\)"
      0 'font-lock-keyword-face t)
     (".*%chapter{\\(.*\\)}"       1 'font-latex-sectioning-1-face t)
     (".*%section{\\(.*\\)}"       1 'font-latex-sectioning-2-face t)
     (".*%subsection{\\(.*\\)}"    1 'font-latex-sectioning-3-face t)
     (".*%subsubsection{\\(.*\\)}" 1 'font-latex-sectioning-4-face t)
     (".*%paragraph{\\(.*\\)}"     1 'font-latex-sectioning-5-face t))))

(after! latex
  (add-to-list 'LaTeX-fold-math-spec-list '(
                                            "[p]" ("part")
                                            "[q]" ("question"))))

(after! latex
  (setq TeX-fold-macro-spec-list '(
                                   ("[f]" ("footnote" "marginpar"))
                                   ("[c]" ("cite"))
                                   ("[l]" ("label"))
                                   ("[r]" ("ref" "pageref" "eqref"))
                                   ("[i]" ("index" "glossary"))
                                   ("[1]:||*" ("item"))
                                   ("..." ("dots"))
                                   ("(C)" ("copyright"))
                                   ("(R)" ("textregistered"))
                                   ("TM" ("texttrademark"))
                                   (1 ("part" "chapter" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "part*" "chapter*" "section*" "subsection*" "subsubsection*" "paragraph*" "subparagraph*" "emph" "textit" "textsl" "textmd" "textrm" "textsf" "texttt" "textbf" "textsc" "textup"))
                                   ("{1}" ("se" "sw" "sps" "sbs" "hw" "qpar" "cite" "parencite" "ol" "mn" "phnm" "mrphm" "enquote" "uline" "num"))
                                   ))
  )

(defun q/repl-macros ()
  (interactive)
  (save-excursion
    (replace-string "\\ra " "$\\rightarrow$~" nil (point-min) (point-max))
    (replace-string "\\nlk " "\\textlnot{}~" nil (point-min) (point-max))
    (replace-string "\\zit{" "\\emph{" nil (point-min) (point-max))
    (replace-string "\\cittit{" "\\emph{" nil (point-min) (point-max))
    (replace-string "\\phn{" "\\phnm{" nil (point-min) (point-max))
    (replace-string "\\slash " "/" nil (point-min) (point-max))
    (replace-string "\\;R" "\\textscr{}" nil (point-min) (point-max))
    (replace-string "\\lra " "$\\longrightarrow$~" nil (point-min) (point-max))
    (replace-string "\\ul{" "\\uline{" nil (point-min) (point-max))
    (replace-string "\\fs{" "\\emph{" nil (point-min) (point-max))
    (replace-string "\\ae " "\\ae{}" nil (point-min) (point-max))
    (replace-string "\\tit{" "\\emph{" nil (point-min) (point-max))
    (replace-string "\\bf{" "\\textbf{" nil (point-min) (point-max))
    (replace-string "\\gp{" "\\grphm{" nil (point-min) (point-max))
    (replace-string "\\sc{" "\\textsc{" nil (point-min) (point-max))
    (replace-string "\\lla " "$\\longleftarrow$~" nil (point-min) (point-max))
    (replace-string "\\ldots " "\\ldots{} " nil (point-min) (point-max))
    (replace-string "\\ldots" "\\ldots{}" nil (point-min) (point-max))
    (replace-string "\\fbox{" "\\textbf{" nil (point-min) (point-max))
    (replace-string "\\llra " "$\\longleftrightarrow{}$~" nil (point-min) (point-max))
    )
  )

(defun q/repl-qitem ()
  (interactive)
  (save-excursion
    (replace-string "\\sitem" "\\begin{qitem}" nil (point-min) (point-max))
    (replace-string "\\begin{itemize}" "\\begin{qitem}" nil (point-min) (point-max))
    (replace-string "\\item" "#" nil (point-min) (point-max))
    (replace-string "\\end{itemize}" "\\end{qitem}" nil (point-min) (point-max))
    (replace-string "\\el" "\\end{qitem}" nil (point-min) (point-max))
    (q/repl-macros)
    )
  )

(defun q/repl-qenum ()
  (interactive)
  (save-excursion
    (replace-string "\\senum" "\\begin{qenum}" nil (point-min) (point-max))
    (replace-string "\\begin{enumerate}" "\\begin{qenum}" nil (point-min) (point-max))
    (replace-string "\\item" "#" nil (point-min) (point-max))
    (replace-string "\\end{enumerate}" "\\end{qenum}" nil (point-min) (point-max))
    (replace-string "\\el" "\\end{qenum}" nil (point-min) (point-max))
    (q/repl-macros)))

(defun q/repl-qblank ()
  (interactive)
  (save-excursion
    (replace-string "\\sitem" "\\begin{qblank}" nil (point-min) (point-max))
    (replace-string "\\el" "\\end{qblank}" nil (point-min) (point-max))
    (q/repl-macros)))

(setq org-msg-convert-citation 't)

(setq
 send-mail-function 'smtpmail-send-it
 message-send-mail-function 'smtpmail-send-it
 user-mail-address "q.wuerschinger@gmail.com"
 smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
 smtpmail-auth-credentials (expand-file-name "~/.authinfo")
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
 smtpmail-smtp-service 587
 smtpmail-debug-info t
 )

(map!
 :leader
 :desc "resize windows" "a r" #'+hydra/window-nav/body)

(map!
 :leader
 :desc "expand region" "a e r" #'er/expand-region)

(map!
 :leader
 :desc "indent region" "a i r" #'indent-region)

(after! dired
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode))))

(after! dired
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash"))

(after! org
  (setq org-clock-mode-line-total 'current))

(defun helm-insert-org-entity ()
  "Helm interface to insert an entity from `org-entities'.
F1 inserts utf-8 character
F2 inserts entity code
F3 inserts LaTeX code (does not wrap in math-mode)
F4 inserts HTML code"
  (interactive)
  (helm :sources (reverse
                  (let ((sources '())
                        toplevel
                        secondlevel)
                    (dolist (element (append
                                      '("* User" "** User entities")
                                      org-entities-user org-entities))
                      (when (and (stringp element)
                                 (s-starts-with? "* " element))
                        (setq toplevel element))
                      (when (and (stringp element)
                                 (s-starts-with? "** " element))
                        (setq secondlevel element)
                        (add-to-list
                         'sources
                         `((name . ,(concat
                                     toplevel
                                     (replace-regexp-in-string
                                      "\\*\\*" " - " secondlevel)))
                           (candidates . nil)
                           (action . (("insert utf-8 char" . (lambda (candidate)
                                                               (insert (nth 6 candidate))))
                                      ("insert org entity" . (lambda (candidate)
                                                               (insert (concat "\\" (car candidate)))))
                                      ("insert latex" . (lambda (candidate)
                                                          (insert (nth 1 candidate))))
                                      ("insert html" . (lambda (candidate)
                                                         (insert (nth 3 candidate)))))))))
                      (when (and element (listp element))
                        (setf (cdr (assoc 'candidates (car sources)))
                              (append
                               (cdr (assoc 'candidates (car sources)))
                               (list (cons
                                      (format "%10s %s" (nth 6 element) element)
                                      element))))))
                    sources))))

(map!
 :leader
 :desc "insert org entity" "i e" #'helm-insert-org-entity)

(after! org
  (map!
   :leader
   :desc "align" "a l" #'align))

(after! org
  (add-to-list 'org-latex-default-packages-alist '("" "qbase")))

(after! org
  (map!
   :leader
   :desc "shrink table" "t s" #'org-table-shrink))

(after! org
  (map!
   :leader
   :desc "expand table" "t e" #'org-table-expand))

(after! org-ref
  (setq org-ref-default-bibliography '("/Users/quirin/promo/bib/references.bib")
        org-ref-pdf-directory "/Users/quirin/promo/bib/pdfs/"))

(use-package! org-roam
  :after org
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/roam")
  (org-roam-dailies-directory "journal")
  (org-roam-graph-viewer "/usr/bin/open")
  :init
  (setq org-roam-dailies-capture-templates '(
                                             ("d" "daily" plain (function org-roam-capture--get-point) ""
                                              :immediate-finish t
                                              :file-name "journal/%<%Y-%m-%d>"
                                              :head "#+TITLE: %<%A, %d %B %Y>\n#+PROPERTY: quality=\n\n* Affirm\n- \n* Dank\n- \n* Was will ich heute machen?\n** TODO\n* Wie war mein Tag?\n- \n* Memoranda\n* Clocktable\n#+begin: clocktable-by-tag :tags (\"work\" \"privat\" \"rout\") :maxlevel 2 :block %<%Y-%m-%d>\n#+end:")
                                             ))
  :config
  (setq +org-roam-open-buffer-on-find-file nil)
  (setq org-roam-graph-exclude-matcher '("dailies"))
  (map!
   :leader
   :desc "add alias" "r a" #'org-roam-alias-add
   :desc "add tag" "r l" #'org-roam-tag-add
   :desc "d / yesterday" "r y" #'org-roam-dailies-find-yesterday
   :desc "d / today" "r t" #'org-roam-dailies-find-today
   :desc "d / tomorrow" "r m" #'org-roam-dailies-find-tomorrow
   :desc "d / date" "r d" #'org-roam-dailies-find-date
   :desc "d / previous" "r p" #'org-roam-dailies-find-previous-note
   :desc "d / next" "r n" #'org-roam-dailies-find-next-note
   :desc "insert" "r i" #'org-roam-insert
   :desc "find file" "r f" #'org-roam-find-file
   :desc "sidebar" "r r" #'org-roam
   )
  )

(use-package! pdf-tools
  :config
  (setq-default pdf-view-display-size 'fit-width)
  (setq pdf-annot-activate-created-annotations t))

(map!
 :leader
 :desc "annotate w/ text" "d t" #'pdf-annot-add-text-annotation)

(map!
 :leader
 :desc "annotate w/ highlight" "d h" #'pdf-annot-add-highlight-markup-annotation)

(map!
 :leader
 :desc "annotate w/ underline" "d u" #'pdf-annot-add-underline-markup-annotation)

(map!
 :leader
 :desc "annotate w/ strikeout" "d s" #'pdf-annot-add-strikeout-markup-annotation)

(map!
 :leader
 :desc "delete annotation" "d d" #'pdf-annot-delete)

(map!
 :leader
 :desc "jump back" "d b" #'pdf-history-goto)

(after! reftex
  (setq reftex-default-bibliography
        '("~/promo/bib/references.bib")))

(after! latex
  (setq TeX-save-query nil))

(after! latex
  (map!
   :leader
   :desc "cycle outline" "a o" #'outline-cycle))

;; Each path is relative to `+mu4e-mu4e-mail-path', which is ~/.mail by default
(set-email-account! "gmail"
  '((mu4e-sent-folder       . "/gmail/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/gmail/[Gmail]/Drafts")
    (mu4e-trash-folder      . "/gmail/Deleted Messages")
    (mu4e-refile-folder     . "/gmail/INBOX")
    (smtpmail-smtp-user     . "q.wuerschinger@gmail.com")
    (user-mail-address      . "q.wuerschinger@gmail.com")    ;; only needed for mu < 1.4
    (mu4e-compose-signature . "---\nQuirin"))
  t)
