#+STARTUP: overview
#+TITLE: Doom Emacs configuration
#+AUTHOR: Quirin Würschinger
#+PROPERTY: header-args :results silent :tangle yes

* personal info
#+BEGIN_SRC elisp
(setq user-full-name "Quirin Würschinger"
    user-mail-address "q.wuerschinger@gmail.com")
#+END_SRC

* use =Alt= key for non-ASCII chars
#+begin_src elisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)

#+end_src
source: https://stackoverflow.com/a/3378391

* font
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "monospace" :size 16))
#+END_SRC
* windows and frames
** clone indirect buffer in new frame
#+begin_src elisp
(defun clone-indirect-buffer-other-frame (newname display-flag &optional norecord)
  "Like `clone-indirect-buffer' but display in another window."
  (interactive
   (progn
     (if (get major-mode 'no-clone-indirect)
         (error "Cannot indirectly clone a buffer in %s mode" mode-name))
     (list (if current-prefix-arg
               (read-buffer "Name of indirect buffer: " (current-buffer)))
           t)))
  ;; (let ((pop-up-windows t))
  (let ((pop-up-frames t)) ; <==========
    (clone-indirect-buffer newname display-flag norecord)))
#+end_src

** resize windows
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :desc "resize windows" "a r" #'+hydra/window-nav/body)
#+END_SRC

** switch frames
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "switch frames" "f o" #'other-frame)
#+END_SRC

* buffers and files
** kill buffer and window
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "kill buffer and window" "b D" #'kill-buffer-and-window)
#+END_SRC

** =helm-buffers-list=
#+begin_src elisp
(map!
 :leader
 :desc "helm-buffers-list" "b h" #'helm-buffers-list
)
#+end_src

** copy file (to current dir)
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "copy file here" "a c" #'copy-file)
#+END_SRC

** move file (to current dir)
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "move file (here)" "a m" #'rename-file)
#+END_SRC

* editing
** expand region
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :desc "expand region" "a e r" #'er/expand-region)
#+END_SRC

** indent region
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :desc "indent region" "a i r" #'indent-region)
#+END_SRC

** multiple cursors
*** hydra for =evil-mc=
source: [[https://hungyi.net/posts/hydra-for-evil-mc/][An evil-mc Emacs Hydra - Hung-Yi’s Journal]]
#+begin_src elisp
(defhydra my-mc-hydra (:color pink
                       :hint nil
                       :pre (evil-mc-pause-cursors))
  "
^Match^            ^Line-wise^           ^Manual^
^^^^^^----------------------------------------------------
_Z_: match all     _J_: make & go down   _z_: toggle here
_m_: make & next   _K_: make & go up     _r_: remove last
_M_: make & prev   ^ ^                   _R_: remove all
_n_: skip & next   ^ ^                   _p_: pause/resume
_N_: skip & prev

Current pattern: %`evil-mc-pattern

"
  ("Z" #'evil-mc-make-all-cursors)
  ("m" #'evil-mc-make-and-goto-next-match)
  ("M" #'evil-mc-make-and-goto-prev-match)
  ("n" #'evil-mc-skip-and-goto-next-match)
  ("N" #'evil-mc-skip-and-goto-prev-match)
  ("J" #'evil-mc-make-cursor-move-next-line)
  ("K" #'evil-mc-make-cursor-move-prev-line)
  ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
  ("r" #'+multiple-cursors/evil-mc-undo-cursor)
  ("R" #'evil-mc-undo-all-cursors)
  ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
  ("q" #'evil-mc-resume-cursors "quit" :color blue)
  ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))

(map!
 (:when (featurep! :editor multiple-cursors)
  :prefix "g"
  :nv "z" #'my-mc-hydra/body))
#+end_src

* =dired=
** hide details by default
#+BEGIN_SRC emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode))))
#+END_SRC

** =dired-narrow=
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "dired narrow" "a d n" #'dired-narrow)
#+END_SRC

** delete files to Trash
#+BEGIN_SRC emacs-lisp
(after! dired
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash"))
#+END_SRC

** icons from =treemacs=
#+BEGIN_SRC elisp
(after! dired
  (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode))
#+END_SRC

** bindings for folders
#+BEGIN_SRC elisp
(map!
 :leader
 :prefix "a"
 :desc "open home" "d h" (lambda () (interactive) (find-file "~"))
 :desc "open Desktop" "d d" (lambda () (interactive) (find-file "~/Desktop"))
 :desc "open promo" "d p" (lambda () (interactive) (find-file "~/promo"))
 :desc "open bib/pdfs" "d b" (lambda () (interactive) (find-file "~/promo/bib/pdfs"))
 :desc "open Volumes" "d v" (lambda () (interactive) (find-file "/Volumes"))
 )
#+END_SRC

* projectile
#+BEGIN_SRC elisp
(after! projectile
  (setq projectile-known-projects '(
                                    ;; private
                                    "~/.doom.d/"
                                    "~/org/"
                                    "~/roam/"
                                    "~/temp/latex/"
                                    "~/Dropbox/orgzly/"

                                    ;; teaching
                                    "~/promo/lehre/2020-21_ue_morph-wf/"
                                    "~/promo/lehre/2020-21_ps_itl/"

                                    ;; projects
                                    "~/promo/neocrawler/"
                                    "~/promo/sna/"
                                    "~/promo/AngloSaxon/"
                                    "~/promo/socemb/"
                                    "~/promo/NeoCov/"
                                    )))
#+END_SRC

* workspaces
#+begin_src elisp
(map!
 :leader
 :desc "switch workspace" "y" #'+workspace/switch-to)
#+end_src

* org
** org dir
#+BEGIN_SRC elisp
(setq org-directory "~/org/")
#+END_SRC

** fold files on startup
backup: ~(setq-default org-startup-folded t)~
#+BEGIN_SRC elisp
(after! org
  (setq org-startup-folded t))
#+END_SRC

** agenda
*** agenda files
#+BEGIN_SRC elisp
(after! org
    (setq org-agenda-files (list
    "~/.doom.d/config.org"
    "~/org/temp.org"

    ;; projects
    "~/promo/sna/sna.org"
    "~/promo/haiku/haiku.org"
    "~/promo/IndVarBNC/IndVarBNC.org"
    "~/promo/AngloSaxon/AngloSaxon.org"
    "~/promo/socemb/socemb.org"
    "~/promo/CoVid/CoVid.org"

    ;; ongoing
    "~/org/work.org"

    ;; teaching
    "~/promo/lehre/2020-21_ps_itl/itl202021.org"
    "~/promo/lehre/2020-21_ue_morph-wf/morph-wf_2020-21.org"

    ;; private
    "~/org/cal/default.org"
    "~/Dropbox/orgzly/mobin.org"
    "~/org/rout.org"
    "~/org/privat.org"
    "~/org/sport.org"
    )))
#+END_SRC

*** agenda view
#+BEGIN_SRC elisp
(after! org
  (defun q/org-agenda ()
    "My personal agenda view."
    (interactive)
    (setq org-agenda-start-with-log-mode t)
    (org-agenda nil "a")
    (org-agenda-day-view))

  (map! :leader
        :desc "q agenda" "a q" #'q/org-agenda)
  )
#+END_SRC

*** log into drawer
#+BEGIN_SRC elisp
(after! org
  (setq org-log-into-drawer t))
#+END_SRC

*** clock into drawer
#+BEGIN_SRC elisp
(after! org
  (setq org-clock-into-drawer "CLOCKBOOK"))
#+END_SRC

*** clocking status
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-clock-mode-line-total 'current))
#+END_SRC

*** hide =DONE= from agenda
#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-skip-scheduled-if-done t))
#+END_SRC

*** hide repeating items
#+BEGIN_SRC elisp
(setq org-agenda-show-future-repeats nil)
#+END_SRC

** insert stuff
*** insert entities
function by John Kitchin ([[https://kitchingroup.cheme.cmu.edu/blog/2015/11/21/Insert-org-entities-into-org-mode-with-helm/][source]])

#+BEGIN_SRC emacs-lisp
(defun helm-insert-org-entity ()
  "Helm interface to insert an entity from `org-entities'.
F1 inserts utf-8 character
F2 inserts entity code
F3 inserts LaTeX code (does not wrap in math-mode)
F4 inserts HTML code"
  (interactive)
  (helm :sources (reverse
                  (let ((sources '())
                        toplevel
                        secondlevel)
                    (dolist (element (append
                                      '("* User" "** User entities")
                                      org-entities-user org-entities))
                      (when (and (stringp element)
                                 (s-starts-with? "* " element))
                        (setq toplevel element))
                      (when (and (stringp element)
                                 (s-starts-with? "** " element))
                        (setq secondlevel element)
                        (add-to-list
                         'sources
                         `((name . ,(concat
                                     toplevel
                                     (replace-regexp-in-string
                                      "\\*\\*" " - " secondlevel)))
                           (candidates . nil)
                           (action . (("insert utf-8 char" . (lambda (candidate)
                                                               (insert (nth 6 candidate))))
                                      ("insert org entity" . (lambda (candidate)
                                                               (insert (concat "\\" (car candidate)))))
                                      ("insert latex" . (lambda (candidate)
                                                          (insert (nth 1 candidate))))
                                      ("insert html" . (lambda (candidate)
                                                         (insert (nth 3 candidate)))))))))
                      (when (and element (listp element))
                        (setf (cdr (assoc 'candidates (car sources)))
                              (append
                               (cdr (assoc 'candidates (car sources)))
                               (list (cons
                                      (format "%10s %s" (nth 6 element) element)
                                      element))))))
                    sources))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(map!
:leader
:desc "insert org entity" "i e" #'helm-insert-org-entity)
#+END_SRC

*** insert timestamp / inactive
#+BEGIN_SRC elisp
(defun q/insert-timestamp-inactive ()
  (interactive)
  (let ((current-prefix-arg '(16)))
    (call-interactively 'org-time-stamp-inactive)))
#+END_SRC
[[https://emacs.stackexchange.com/questions/12130/how-to-insert-inactive-timestamp-via-function][source]]

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "timestamp" "i t" #'q/insert-timestamp-inactive
 )
#+END_SRC

*** insert datestamp / inactive
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "datestamp" "i d" #'org-time-stamp-inactive
 )
#+END_SRC

*** insert file link
#+BEGIN_SRC elisp
(defun q/insert-file-link ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'org-insert-link)))
#+END_SRC

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "insert file link" "l" #'q/insert-file-link)
#+END_SRC

*** insert file path
#+begin_src elisp
(defun my-counsel-insert-file-path ()
  "Insert file path."
  (interactive)
  (unless (featurep 'counsel) (require 'counsel))
  (ivy-read "Find file: " 'read-file-name-internal
            :matcher #'counsel--find-file-matcher
            :action
            (lambda (x)
              (insert x))))

(map!
 :leader
 :desc "insert file path" "L" #'my-counsel-insert-file-path)
#+end_src
source: https://emacs.stackexchange.com/a/39107/29471

*** insert checkbox
#+BEGIN_SRC elisp
(defun q/toggle-checkbox ()
  (interactive)
  (let
      ((current-prefix-arg '(4)))
    (call-interactively 'org-toggle-checkbox)))
#+END_SRC

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "insert checkbox" "c h" #'q/toggle-checkbox)
#+END_SRC

** align stuff
#+BEGIN_SRC emacs-lisp
(after! org
  (map!
   :leader
   :desc "align" "a l" #'align))
#+END_SRC

** export
*** remove brackets around timestamps
source: https://stackoverflow.com/a/33716338/4165300

#+BEGIN_SRC elisp
(defun org-export-filter-timestamp-remove-brackets (timestamp backend info)
  "removes relevant brackets from a timestamp"
  (cond
    ((org-export-derived-backend-p backend 'latex)
     (replace-regexp-in-string "[<>]\\|[][]" "" timestamp))
    ((org-export-derived-backend-p backend 'html)
     (replace-regexp-in-string "&[lg]t;\\|[][]" "" timestamp))
  )
)

(eval-after-load 'ox '(add-to-list
                       'org-export-filter-timestamp-functions
                       'org-export-filter-timestamp-remove-brackets))
#+END_SRC

*** to =LaTeX=
**** =scrartcl=
#+BEGIN_SRC elisp
(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("koma-article" "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

**** always use =qbase=
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-latex-default-packages-alist '("" "qbase")))
#+end_src

**** always use =booktabs=
#+BEGIN_SRC elisp
(after! org
  (setq org-latex-tables-booktabs t))
#+END_SRC

*** to =docx=
#+BEGIN_SRC elisp
(use-package ox-word)
#+END_SRC

** tables
*** shrink
#+BEGIN_SRC emacs-lisp
(after! org
  (map!
   :leader
   :desc "shrink table" "t s" #'org-table-shrink))
#+END_SRC

*** expand
#+BEGIN_SRC emacs-lisp
(after! org
  (map!
   :leader
   :desc "expand table" "t e" #'org-table-expand))
#+END_SRC

** =org-ref=
#+BEGIN_SRC emacs-lisp
(after! org-ref
  (setq org-ref-default-bibliography '("/Users/quirin/promo/bib/references.bib")
        org-ref-pdf-directory "/Users/quirin/promo/bib/pdfs/"))
#+END_SRC

** =org-roam=
*** config
#+BEGIN_SRC emacs-lisp
(use-package! org-roam
  :after org
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/org/roam")
  (org-roam-dailies-directory "journal")
  (org-roam-graph-viewer "/usr/bin/open")
  :init
  (setq org-roam-dailies-capture-templates '(
                                             ("d" "daily" plain (function org-roam-capture--get-point) ""
                                              :immediate-finish t
                                              :file-name "journal/%<%Y-%m-%d>"
                                              :head "#+TITLE: %<%A, %d %B %Y>\n#+PROPERTY: quality=\n\n* Affirm\n* Dank\n* Was will ich heute machen?\n* Wie war mein Tag?\n** negativ\n** positiv\n* Memoranda")
                                             ))
  :config
  (setq +org-roam-open-buffer-on-find-file nil)
  (setq org-roam-graph-exclude-matcher '("dailies"))
  (map!
   :leader
   :desc "add alias" "r a" #'org-roam-alias-add
   :desc "add tag" "r l" #'org-roam-tag-add
   :desc "d / yesterday" "r y" #'org-roam-dailies-find-yesterday
   :desc "d / today" "r t" #'org-roam-dailies-find-today
   :desc "d / tomorrow" "r m" #'org-roam-dailies-find-tomorrow
   :desc "d / date" "r d" #'org-roam-dailies-find-date
   :desc "d / previous" "r p" #'org-roam-dailies-find-previous-note
   :desc "d / next" "r n" #'org-roam-dailies-find-next-note
   :desc "insert" "r i" #'org-roam-insert
   :desc "find file" "r f" #'org-roam-find-file
   :desc "sidebar" "r r" #'org-roam
   )
  )
#+END_SRC

*** =org-roam-bibtex=
#+begin_src elisp
(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode))
  :config
    (setq orb-templates
      '(
         ("r" "ref" plain (function org-roam-capture--get-point) ""
            :file-name "${citekey}"
            :head "#+TITLE: ${citekey}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS: " ; <--
            :unnarrowed t
         )
       )
    )
#+end_src

** =org-babel=

* LaTeX
** show pdf in =pdf-tools=
*** use =pdf-tools= as a viewer
source: https://emacs.stackexchange.com/questions/19472/how-to-let-auctex-open-pdf-with-pdf-tools

#+BEGIN_SRC elisp
(after! latex
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  )
#+END_SRC

*** use new frame
source: https://emacs.stackexchange.com/questions/55395/auctex-and-pdf-tools-in-2-separate-frames-for-dual-monitor-setup

- if only one frame is present: use new window
- if separate frame available: use separate frame

#+BEGIN_SRC elisp
(after! latex
  (defun framesMenus-display-buffer-use-some-frame (fun &rest args)
    "Use `display-buffer-use-some-frame' as `display-buffer-overriding-action'.
Then run FUN with ARGS."
    (let ((display-buffer-overriding-action '(display-buffer-use-some-frame)))
      (apply fun args)))

  (advice-add 'TeX-pdf-tools-sync-view :around #'framesMenus-display-buffer-use-some-frame)
  (advice-add 'pdf-sync-backward-search-mouse :around #'framesMenus-display-buffer-use-some-frame)
  )
#+END_SRC

** show table of contents
using =reftex=
#+begin_src elisp
(map!
 :leader
 :desc "reftex-toc" "a t" #'reftex-toc)
#+end_src

** set =reftex= bibliography path
#+BEGIN_SRC emacs-lisp
(after! reftex
  (setq reftex-default-bibliography
        '("~/promo/bib/references.bib")))
#+END_SRC

** compile without save query
#+BEGIN_SRC emacs-lisp
(after! latex
  (setq TeX-save-query nil))
#+END_SRC

** folding
*** using =outline-minor-mode= and =outline-magic=
**** =outline-minor-mode=
add fake sections to outline mode
source: https://emacs.stackexchange.com/questions/3072/how-to-use-auctex-and-outline-minor-mode-together-for-folding

***** extra outline headers
#+BEGIN_SRC elisp
(after! latex
  (setq TeX-outline-extra
        '(
          (".*%chapter" 1)
          (".*%section" 2)
          (".*%subsection" 3)
          (".*%subsubsection" 4)
          (".*%paragraph" 5)
          ("[ \t]*\\\\question\\b" 2)
          ("[ \t]*\\\\part\\b" 3)
          )))
#+END_SRC

***** add font locking to the headers
#+BEGIN_SRC elisp
(after! latex
  (font-lock-add-keywords
   'latex-mode
   '((".*%\\(chapter\\|\\(sub\\|subsub\\)?section\\|paragraph\\)"
      0 'font-lock-keyword-face t)
     (".*%chapter{\\(.*\\)}"       1 'font-latex-sectioning-1-face t)
     (".*%section{\\(.*\\)}"       1 'font-latex-sectioning-2-face t)
     (".*%subsection{\\(.*\\)}"    1 'font-latex-sectioning-3-face t)
     (".*%subsubsection{\\(.*\\)}" 1 'font-latex-sectioning-4-face t)
     (".*%paragraph{\\(.*\\)}"     1 'font-latex-sectioning-5-face t))))
#+END_SRC

**** add macros (for exam class)
#+BEGIN_SRC elisp
(after! latex
  (add-to-list 'LaTeX-fold-math-spec-list '(
                                            "[p]" ("part")
                                            "[q]" ("question"))))
#+END_SRC

**** =outline-magic=
- source:
  + https://github.com/tj64/outline-magic
  + MELPA: https://melpa.org/#/outline-magic
- extension to =outline-minor-mode=

#+BEGIN_SRC emacs-lisp
(after! latex
  (map!
   :leader
   :desc "cycle outline" "a o" #'outline-cycle))
#+END_SRC

*** fold custom macros
source: https://emacs.stackexchange.com/a/33679/29471

#+BEGIN_SRC elisp
(after! latex
  (setq TeX-fold-macro-spec-list '(
                                   ("[f]" ("footnote" "marginpar"))
                                   ("[c]" ("cite"))
                                   ("[l]" ("label"))
                                   ("[r]" ("ref" "pageref" "eqref"))
                                   ("[i]" ("index" "glossary"))
                                   ("[1]:||*" ("item"))
                                   ("..." ("dots"))
                                   ("(C)" ("copyright"))
                                   ("(R)" ("textregistered"))
                                   ("TM" ("texttrademark"))
                                   (1 ("part" "chapter" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "part*" "chapter*" "section*" "subsection*" "subsubsection*" "paragraph*" "subparagraph*" "emph" "textit" "textsl" "textmd" "textrm" "textsf" "texttt" "textbf" "textsc" "textup"))
                                   ("{1}" ("se" "sw" "sps" "sbs" "hw" "qpar" "cite" "parencite" "ol" "mn" "phnm" "mrphm" "enquote" "uline" "num"))
                                   ))
  )
#+END_SRC

** replace obsolete macros
*** macros
#+BEGIN_SRC elisp
(defun q/repl-macros ()
  (interactive)
  (save-excursion
    (replace-string "\\ra " "$\\rightarrow$~" nil (point-min) (point-max))
    (replace-string "\\nlk " "\\textlnot{}~" nil (point-min) (point-max))
    (replace-string "\\zit{" "\\emph{" nil (point-min) (point-max))
    (replace-string "\\cittit{" "\\emph{" nil (point-min) (point-max))
    (replace-string "\\phn{" "\\phnm{" nil (point-min) (point-max))
    (replace-string "\\slash " "/" nil (point-min) (point-max))
    (replace-string "\\;R" "\\textscr{}" nil (point-min) (point-max))
    (replace-string "\\lra " "$\\longrightarrow$~" nil (point-min) (point-max))
    (replace-string "\\ul{" "\\uline{" nil (point-min) (point-max))
    (replace-string "\\fs{" "\\emph{" nil (point-min) (point-max))
    (replace-string "\\ae " "\\ae{}" nil (point-min) (point-max))
    (replace-string "\\tit{" "\\emph{" nil (point-min) (point-max))
    (replace-string "\\bf{" "\\textbf{" nil (point-min) (point-max))
    (replace-string "\\gp{" "\\grphm{" nil (point-min) (point-max))
    (replace-string "\\sc{" "\\textsc{" nil (point-min) (point-max))
    (replace-string "\\lla " "$\\longleftarrow$~" nil (point-min) (point-max))
    (replace-string "\\ldots " "\\ldots{} " nil (point-min) (point-max))
    (replace-string "\\ldots" "\\ldots{}" nil (point-min) (point-max))
    (replace-string "\\fbox{" "\\textbf{" nil (point-min) (point-max))
    (replace-string "\\llra " "$\\longleftrightarrow{}$~" nil (point-min) (point-max))
  )
)
#+END_SRC

*** =qitem=
#+BEGIN_SRC elisp
(defun q/repl-qitem ()
  (interactive)
  (save-excursion
    (replace-string "\\sitem" "\\begin{qitem}" nil (point-min) (point-max))
    (replace-string "\\begin{itemize}" "\\begin{qitem}" nil (point-min) (point-max))
    (replace-string "\\item" "#" nil (point-min) (point-max))
    (replace-string "\\end{itemize}" "\\end{qitem}" nil (point-min) (point-max))
    (replace-string "\\el" "\\end{qitem}" nil (point-min) (point-max))
    (q/repl-macros)
    )
  )
#+END_SRC

*** =qenum=
#+BEGIN_SRC elisp
(defun q/repl-qenum ()
  (interactive)
  (save-excursion
    (replace-string "\\senum" "\\begin{qenum}" nil (point-min) (point-max))
    (replace-string "\\begin{enumerate}" "\\begin{qenum}" nil (point-min) (point-max))
    (replace-string "\\item" "#" nil (point-min) (point-max))
    (replace-string "\\end{enumerate}" "\\end{qenum}" nil (point-min) (point-max))
    (replace-string "\\el" "\\end{qenum}" nil (point-min) (point-max))
    (q/repl-macros)))
#+END_SRC

*** =qblank=
#+BEGIN_SRC elisp
(defun q/repl-qblank ()
  (interactive)
  (save-excursion
    (replace-string "\\sitem" "\\begin{qblank}" nil (point-min) (point-max))
    (replace-string "\\el" "\\end{qblank}" nil (point-min) (point-max))
    (q/repl-macros)))
#+END_SRC

* citations and bibliography (=helm-bibtex=)
#+BEGIN_SRC elisp
(after! helm-bibtex
  (setq bibtex-completion-bibliography '("~/promo/bib/references.bib"))
  (map!
   :leader
   :desc "bibliography" "a b" #'helm-bibtex))
#+END_SRC

* =pdf-tools=
#+BEGIN_SRC emacs-lisp
(use-package! pdf-tools
  :config
  (setq-default pdf-view-display-size 'fit-width)
  (setq pdf-annot-activate-created-annotations t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :desc "annotate w/ text" "d t" #'pdf-annot-add-text-annotation)

(map!
 :leader
 :desc "annotate w/ highlight" "d h" #'pdf-annot-add-highlight-markup-annotation)

(map!
 :leader
 :desc "annotate w/ underline" "d u" #'pdf-annot-add-underline-markup-annotation)

(map!
 :leader
 :desc "annotate w/ strikeout" "d s" #'pdf-annot-add-strikeout-markup-annotation)

(map!
 :leader
 :desc "delete annotation" "d d" #'pdf-annot-delete)

(map!
 :leader
 :desc "jump back" "d b" #'pdf-history-goto)
#+END_SRC
