#+startup: overview
#+title: Doom Emacs configuration
#+author: Quirin Würschinger
#+property: header-args :results silent :tangle yes

* personal info
#+BEGIN_SRC elisp
(setq user-full-name "Quirin Würschinger"
     user-mail-address "q.wuerschinger@gmail.com")
#+END_SRC

* use =Alt= key for non-ASCII chars
#+begin_src elisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)

#+end_src
source: https://stackoverflow.com/a/3378391

* font
** set font size
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "monospace" :size 18))
#+END_SRC

** change font size
#+begin_src elisp
(defhydra hydra-zoom ()
  "zoom"
  ("k" text-scale-increase "in")
  ("j" text-scale-decrease "out"))

(map!
 :leader
 :desc "zoom hydra" "f s" #'hydra-zoom/body
 )
#+end_src
* buffers and files
** kill buffer and window
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "kill buffer and window" "b D" #'kill-buffer-and-window)
#+END_SRC
** copy file (to current dir)
#+BEGIN_SRC elisp
(map!
 :leader
 :prefix "j"
 :desc "copy file here" "c" #'copy-file)
#+END_SRC

** move file (to current dir)
#+BEGIN_SRC elisp
(map!
 :leader
 :prefix "j"
 :desc "move file here" "m" #'rename-file)
#+END_SRC
** switch to recents using =dogears=
*** install
#+begin_src elisp :tangle packages.el
(package! dogears
  :recipe (:host github
           :repo "alphapapa/dogears.el"
           :files (:defaults (:exclude "helm-dogears.el"))))
#+end_src

*** configure
#+begin_src elisp
(use-package! dogears
  :bind (:map global-map
         ("M-g d" . dogears-go)
         ("M-g M-b" . dogears-back)
         ("M-g M-f" . dogears-forward)
         ("M-g M-d" . dogears-list)
         ("M-g M-D" . dogears-sidebar)))
#+end_src

* windows and frames
** hydra for managing windows
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :prefix "j"
 :desc "resize windows" "r" #'+hydra/window-nav/body)
#+END_SRC

* editing
** expand region
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :prefix "j"
 :desc "expand region" "e r" #'er/expand-region)
#+END_SRC

** multiple cursors
*** hydra for =evil-mc=
source: [[https://hungyi.net/posts/hydra-for-evil-mc/][An evil-mc Emacs Hydra - Hung-Yi’s Journal]]
#+begin_src elisp
(defhydra my-mc-hydra (:color pink
                       :hint nil
                       :pre (evil-mc-pause-cursors))
  "
^Match^            ^Line-wise^           ^Manual^
^^^^^^----------------------------------------------------
_Z_: match all     _J_: make & go down   _z_: toggle here
_m_: make & next   _K_: make & go up     _r_: remove last
_M_: make & prev   ^ ^                   _R_: remove all
_n_: skip & next   ^ ^                   _p_: pause/resume
_N_: skip & prev

Current pattern: %`evil-mc-pattern

"
  ("Z" #'evil-mc-make-all-cursors)
  ("m" #'evil-mc-make-and-goto-next-match)
  ("M" #'evil-mc-make-and-goto-prev-match)
  ("n" #'evil-mc-skip-and-goto-next-match)
  ("N" #'evil-mc-skip-and-goto-prev-match)
  ("J" #'evil-mc-make-cursor-move-next-line)
  ("K" #'evil-mc-make-cursor-move-prev-line)
  ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
  ("r" #'+multiple-cursors/evil-mc-undo-cursor)
  ("R" #'evil-mc-undo-all-cursors)
  ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
  ("q" #'evil-mc-resume-cursors "quit" :color blue)
  ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))

(map!
 (:when (featurep! :editor multiple-cursors)
  :prefix "g"
  :nv "z" #'my-mc-hydra/body))
#+end_src
* =projectile=
** set projects
#+BEGIN_SRC elisp
(after! projectile
  (setq projectile-known-projects '(
                                    ;; private
                                    "~/.doom.d/"
                                    "~/org/"
                                    "~/roam/"
                                    "~/temp/latex/"
                                    "~/Dropbox/orgzly/"

                                    ;; teaching
                                    "~/promo/lehre/2020-21_ue_morph-wf/"
                                    "~/promo/lehre/2021_ps_itl/"
                                    "~/promo/lehre/2021_sem_lexical-innovation/"
                                    "~/promo/lehre/2021_ue_social-media/"
                                    "~/promo/lehre/2021_vl_dh/"
                                    "~/promo/lehre/2021-22_ps_itl/"
                                    "~/promo/lehre/2021-22_sem_morph-wf/"

                                    ;; projects
                                    "~/promo/neocrawler/"
                                    "~/promo/sna/"
                                    "~/promo/AngloSaxon/"
                                    "~/promo/socemb/"
                                    "~/promo/NeoCov/"
                                    )))
#+END_SRC

** switch between workspaces
#+begin_src elisp
(map!
 :leader
 :desc "switch workspace" "y" #'+workspace/switch-to)
#+end_src

* =org-mode=
** fold files on startup
backup: ~(setq-default org-startup-folded t)~
#+BEGIN_SRC elisp
(after! org
  (setq org-startup-folded t))
#+END_SRC

** fold non-active trees
#+begin_src elisp
(defun org-show-current-heading-tidily ()
  (interactive)  ;Inteactive
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-back-to-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

(after! org
  (map!
   :leader
   :prefix "j"
   :desc "fold other trees" "j" #'org-show-current-heading-tidily))
#+end_src

** org dir
#+BEGIN_SRC elisp
(setq org-directory "~/org/")
#+END_SRC
 org
** agenda
*** open my agenda view

#+BEGIN_SRC elisp
(after! org
  (defun q/org-agenda ()
    "My personal agenda view."
    (interactive)
    (setq org-agenda-start-with-log-mode t)
    (org-agenda nil "a")
    (org-agenda-day-view)
    (org-agenda-goto-today)
    )

  (map!
   :desc "open agenda"
   :leader
   :prefix "j"
   "Q" #'q/org-agenda)
  )
#+END_SRC

*** switch to agenda keybinding

#+begin_src emacs-lisp
(fset 'switch-to-agenda
   (kmacro-lambda-form [?  ?w ?v ?  ?w ?l ?  ?b ?B ?o ?r ?g ?  ?a ?g ?e ?n ?d ?a return] 0 "%d"))

(map!
 :desc "switch to agenda"
 :leader
 :prefix "j"
 "q" #'switch-to-agenda
 )
#+end_src

*** agenda files
#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-files (list
                          "~/.doom.d/config.org"
                          "~/org/temp.org"

                          ;; projects
                          "~/promo/sna/sna.org"
                          "~/promo/haiku/haiku.org"
                          "~/promo/IndVarBNC/IndVarBNC.org"
                          "~/promo/AngloSaxon/AngloSaxon.org"
                          "~/promo/socemb/socemb.org"
                          "~/promo/CoVid/CoVid.org"

                          ;; ongoing
                          "~/org/work.org"
                          "~/org/method.org"
                          "~/promo/lehrveranstaltungen/2021_os_english-linguistics/2021_os_english-linguistics.org"

                          ;; teaching
                          "~/promo/lehre/2020-21_ps_itl/itl202021.org"
                          "~/promo/lehre/2020-21_ue_morph-wf/morph-wf_2020-21.org"

                          "~/promo/lehre/2021_ps_itl/ps_itl.org"
                          "~/promo/lehre/2021_sem_lexical-innovation/sem_lexical-innovation.org"
                          "~/promo/lehre/2021_ue_social-media/ue_social-media.org"

                          "~/promo/lehre/2021-22_ps_itl/2021-22_ps_itl.org"
                          "~/promo/lehre/2021-22_sem_morph-wf/sem_morph-wf.org"

                          ;; private
                          "~/Dropbox/orgzly/mobin.org"
                          "~/org/rout.org"
                          "~/org/privat.org"
                          "~/org/dp.org"
                          )
        )
  )
#+END_SRC

*** include archive files
#+begin_src elisp
(setq org-agenda-archives-mode 't)
#+end_src

*** agenda view / sorting strategy
#+begin_src elisp
(setq org-agenda-sorting-strategy
      '(
        (agenda habit-down time-up priority-down)
        (todo priority-down category-keep)
        (tags priority-down category-keep)
        (search category-keep)
        )
      )
#+end_src

*** clocking
**** clock into drawer
#+BEGIN_SRC elisp
(after! org
  (setq org-clock-into-drawer "CLOCKBOOK"))
#+END_SRC

**** log into drawer
#+BEGIN_SRC elisp
(after! org
  (setq org-log-into-drawer t))
#+END_SRC
**** clocking status
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-clock-mode-line-total 'current))
#+END_SRC

**** clocktable by tags
- source
  + Stack Overflow / comment: https://emacs.stackexchange.com/a/32182/29471
  + gist: https://gist.github.com/ironchicken/6b5424bc2024b3d0a58a8a130f73c2ee
- my adjustment:
  - set column width to =19= to fit on split windows
  - file names could be removed by commenting out the respective lines below

#+begin_src elisp
(defun clocktable-by-tag/shift-cell (n)
  (let ((str ""))
    (dotimes (i n)
      (setq str (concat str "| ")))
    str))

(defun clocktable-by-tag/insert-tag (params)
  (let ((tag (plist-get params :tags)))
    (insert "|--\n")
    (insert (format "| %s | *Tag time* |\n" tag))
    (let ((total 0))
      (mapcar
       (lambda (file)
         (let ((clock-data (with-current-buffer (find-file-noselect file)
                             (org-clock-get-table-data (buffer-name) params))))
           (when (> (nth 1 clock-data) 0)
             (setq total (+ total (nth 1 clock-data)))
             (insert (format "| | File *%s* | %.2f |\n"
                             (file-name-nondirectory file)
                             (/ (nth 1 clock-data) 60.0)))
             (dolist (entry (nth 2 clock-data))
               (insert (format "| | . %s%s | %s %.2f |\n"
                               (org-clocktable-indent-string (nth 0 entry))
                               (nth 1 entry)
                               (clocktable-by-tag/shift-cell (nth 0 entry))
                               (/ (nth 4 entry) 60.0)))))))
       (org-agenda-files))
      (save-excursion
        (re-search-backward "*Tag time*")
        (org-table-next-field)
        (org-table-blank-field)
        (insert (format "*%.2f*" (/ total 60.0)))))
    (org-table-align)))

(defun org-dblock-write:clocktable-by-tag (params)
  (insert "| Tag | Headline | Time (h) |\n")
  (insert "|     | <l19>    | <r>  |\n")
  (let ((tags (plist-get params :tags)))
    (mapcar (lambda (tag)
              (clocktable-by-tag/insert-tag (plist-put (plist-put params :match tag) :tags tag)))
            tags)))
#+end_src
**** don't remove clocking durations of =0=
:PROPERTIES:
:ID:       bf7b878f-a4f9-4034-821a-ae8d73b6b661
:END:
#+begin_src elisp
(after! org
  (setq org-clock-out-remove-zero-time-clocks nil))
#+end_src

*** hide repeating items
#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-show-future-repeats nil))
#+END_SRC

*** hide =DONE= from agenda
#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-skip-scheduled-if-done t))
#+END_SRC
** use IDs for links
#+begin_src elisp
(setq org-id-link-to-org-use-id 'use-existing)
#+end_src

** image width
#+begin_src elisp
(after! org
  (setq org-image-actual-width 500))
#+end_src

** subtree operations
*** mark
#+begin_src elisp
(map!
 :leader
 :desc "org-mark-subtree" "m s v" #'org-mark-subtree)
#+end_src
*** cut
#+begin_src elisp
(map!
 :leader
 :desc "org-cut-special" "m s d" #'org-cut-special)
#+end_src

*** copy
#+begin_src elisp
(map!
 :leader
 :desc "org-copy-special" "m s y" #'org-copy-special)
#+end_src

*** paste
#+begin_src elisp
(map!
 :leader
 :desc "org-paste-special" "m s p" #'org-paste-special)
#+end_src

*** widen
#+begin_src elisp
(map!
 :leader
 :desc "org-paste-subtree" "m s w" #'widen)
#+end_src
** shifting timestamps
#+begin_src elisp
(map!
 :after evil-org
 :map evil-org-mode-map
 :n "C-h" #'org-shiftleft
 :n "C-j" #'org-shiftdown
 :n "C-k" #'org-shiftup
 :n "C-l" #'org-shiftright
 )
#+end_src
** calendar start weekday on Mondays
#+begin_src elisp
(after! org
  (setq calendar-week-start-day 1))
#+end_src
** insert stuff
*** insert datetime / inactive
#+BEGIN_SRC elisp
(defun q/insert-timestamp-inactive ()
  (interactive)
  (let ((current-prefix-arg '(16)))
    (call-interactively 'org-time-stamp-inactive)))
#+END_SRC
[[https://emacs.stackexchange.com/questions/12130/how-to-insert-inactive-timestamp-via-function][source]]

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "timestamp" "i t" #'q/insert-timestamp-inactive
 )
#+END_SRC

*** insert date / inactive
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "datestamp" "i d" #'org-time-stamp-inactive)
#+END_SRC

*** insert file link
#+BEGIN_SRC elisp
(defun q/insert-file-link ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'org-insert-link)))
#+END_SRC

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "insert file link" "l" #'q/insert-file-link)
#+END_SRC

*** insert file path
#+begin_src elisp
(defun my-counsel-insert-file-path ()
  "Insert file path."
  (interactive)
  (unless (featurep 'counsel) (require 'counsel))
  (ivy-read "Find file: " 'read-file-name-internal
            :matcher #'counsel--find-file-matcher
            :action
            (lambda (x)
              (insert x))))

(map!
 :leader
 :desc "insert file path" "L" #'my-counsel-insert-file-path)
#+end_src
source: https://emacs.stackexchange.com/a/39107/29471

*** insert checkbox
#+BEGIN_SRC elisp
(defun q/toggle-checkbox ()
  (interactive)
  (let
      ((current-prefix-arg '(4)))
    (call-interactively 'org-toggle-checkbox)))
#+END_SRC

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "insert checkbox" "c h" #'q/toggle-checkbox)
#+END_SRC
** export
*** format datetime stamps
**** remove brackets
source: https://stackoverflow.com/a/33716338/4165300

#+BEGIN_SRC elisp
(defun org-export-filter-timestamp-remove-brackets (timestamp backend info)
  "removes relevant brackets from a timestamp"
  (cond
   ((org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "[<>]\\|[][]" "" timestamp))
   ((org-export-derived-backend-p backend 'html)
    (replace-regexp-in-string "&[lg]t;\\|[][]" "" timestamp))
   )
  )

(eval-after-load 'ox '(add-to-list
                       'org-export-filter-timestamp-functions
                       'org-export-filter-timestamp-remove-brackets))
#+END_SRC
**** custom format
#+begin_src elisp
(setq org-time-stamp-custom-formats '("%e %B, %Y" . "%e %B, %Y, %H:%M h"))

(defun my-org-export-ensure-custom-times (backend)
  (setq-local org-display-custom-times t)
  )

(add-hook 'org-export-before-processing-hook 'my-org-export-ensure-custom-times)
#+end_src
https://emacs.stackexchange.com/a/34436/29471
*** to =LaTeX=
**** don't center tables
#+begin_src elisp
(setq org-latex-tables-centered nil)
#+end_src

**** always use =booktabs=
#+BEGIN_SRC elisp
(after! org
  (setq org-latex-tables-booktabs t))
#+END_SRC
*** via =odt= to =docx=

#+begin_src elisp
(setq org-odt-preferred-output-format "docx")
#+end_src

** =org-tables=
*** shrink
#+BEGIN_SRC emacs-lisp
(after! org
  (map!
   :leader
   :desc "shrink table" "t s" #'org-table-shrink))
#+END_SRC

*** expand
#+BEGIN_SRC emacs-lisp
(after! org
  (map!
   :leader
   :desc "expand table" "t e" #'org-table-expand))
#+END_SRC
*** =orgtbl-aggregate=
:PROPERTIES:
:ID:       a6973000-50f7-448f-b5f7-feeb01770e8c
:END:
**** install
#+begin_src elisp :tangle packages.el
(package! orgtbl-aggregate)
#+end_src
*** =orgtbljoin=
:PROPERTIES:
:ID:       bd489b47-ecb9-4f8f-ad3a-9a32e3fe0ce5
:END:
**** install

#+begin_src elisp :tangle packages.el
(package! orgtbl-join
  :recipe (:host github
           :repo "tbanel/orgtbljoin"))
#+end_src

**** config

#+begin_src elisp
(use-package! orgtbl-join
  :after org)
#+end_src

** =org-super-agenda=
*** install
#+begin_src elisp :tangle packages.el
(package! org-super-agenda)
#+end_src

*** configure
#+begin_src elisp
(use-package! org-super-agenda
  :after org
  :init
  ;; fix to retain evil bindings for Doom Emacs from GitHub issue in package repo; source: [[https://github.com/alphapapa/org-super-agenda/issues/50][alphapapa/org-super-agenda#50 Some keybindings not working at heading]]
  (setq org-super-agenda-header-map (make-sparse-keymap))
  :hook
  (after-init . org-super-agenda-mode)
  :config
  (setq org-super-agenda-groups
        ;; no grouping by priority automatically: ~(:name "prio" :priority>= "9" :order 5)~
        '(
          (:name "time" :time-grid t)
          (:name "overdue" :scheduled past :time-grid t)
          (:name "prio" :auto-priority)
          (:name "rout" :tag "rout")
          (:name "work" :tag "work")
          (:name "privat" :tag "privat")
          (:name "method" :tag "method")
          )
        )
  )
#+end_src

** =org-babel=
*** default arguments for =jupyter-python=
for [[file:../roam/20210822112618-ipython.org][IPython]] source blocks
#+begin_src elisp
(setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                     (:kernel . "qw")
                                                     (:session . "jupy")
                                                     ))
#+end_src
*** default header arguments: don't evaluate for export

#+begin_src elisp
(after! org
  (setq org-babel-default-header-args
        (cons '(:eval . "no-export")
              (assq-delete-all :noweb org-babel-default-header-args))))
#+end_src
** =org-roam=
*** config
#+BEGIN_SRC emacs-lisp
(use-package! org-roam
  :after org
  :hook
    (after-init . org-roam-mode)
  :custom
    (org-roam-directory "~/roam")
    (org-roam-dailies-directory "journal")
    (org-roam-graph-viewer "/usr/bin/open")
  :init
    (setq org-roam-dailies-capture-templates
            '(("d" "default" entry
            "* %?"
            :target (file+head
                        "%<%Y-%m-%d>.org"
                        ;; "#+title: %<%Y-%m-%d>\n"
                        "#+TITLE: %<%A, %d %B %Y>\n#+PROPERTY: quality \n\n* Affirm\n- \n* Dank\n** \n* Was will ich heute machen?\n** TODO\n* Wie war mein Tag?\n** \n* Memoranda\n** \n* Clocktable\n#+begin: clocktable-by-tag :tags (\"work\" \"privat\" \"rout\" \"method\") :maxlevel 1 :block %<%Y-%m-%d>\n#+end:"))))
    ;; (setq org-roam-capture-templates
    ;;         '(("r" "bibliography reference" plain
    ;;         "%?"
    ;;         :target
    ;;         (file+head "${citekey}.org" "#+title: ${citekey}\n#+filetags:\n")
    ;;         :unnarrowed t)))
  :config
    (setq +org-roam-open-buffer-on-find-file nil)
    (setq org-roam-graph-exclude-matcher '("dailies"))

  (map!
   :leader
   :prefix "r"
   :desc "sidebar" "r" #'org-roam-buffer-toggle
   :desc "find file" "f" #'org-roam-node-find
   :desc "insert" "i" #'org-roam-node-insert
   :desc "add alias" "a" #'org-roam-alias-add
   :desc "add tag" "l" #'org-roam-tag-add
   :desc "sync DB" "s" #'org-roam-db-sync
   :desc "d / yesterday" "y" #'org-roam-dailies-goto-yesterday
   :desc "d / today" "t" #'org-roam-dailies-goto-today
   :desc "d / tomorrow" "m" #'org-roam-dailies-goto-tomorrow
   :desc "d / date" "d" #'org-roam-dailies-goto-date
   :desc "d / previous" "p" #'org-roam-dailies-goto-previous-note
   :desc "d / next" "n" #'org-roam-dailies-goto-next-note
   )
  )
#+END_SRC

*** =org-roam=bibtex= :inactive:
**** install
#+begin_src elisp :tangle no
(package! org-roam-bibtex
  :recipe (:host github
           :repo "org-roam/org-roam-bibtex"))
#+end_src

**** configure
#+begin_src elisp :tangle no
(use-package! org-roam-bibtex
  :after org-roam)
#+end_src

*** =org-roam-ui=
**** install
#+begin_src elisp :tangle packages.el
(unpin! org-roam)
(package! websocket)
(package! org-roam-ui
  :recipe (
           :host github
           :repo "org-roam/org-roam-ui"
           :files ("*.el" "out")))
#+end_src

**** config
#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
*** =vulpea=
**** install
#+begin_src elisp :tangle packages.el
(package! vulpea
  :recipe (:host github
           :repo "d12frosted/vulpea"))
#+end_src

**** configure
#+begin_src elisp :tangle yes
(use-package! vulpea)
#+end_src
**** [[id:b33061d6-d377-4403-941d-ff7e25aa5c08][search for backlinks intersection]]
***** basic function
#+begin_src elisp
(defun vulpea-backlinks-many (notes)
  "Return notes that link to all NOTES at the same time."
  (let* ((blinks-all
          (emacsql-with-transaction (org-roam-db)
            (seq-map
             (lambda (note)
               (seq-map
                #'vulpea-db--from-node
                (seq-map
                 #'org-roam-backlink-source-node
                 (org-roam-backlinks-get
                  (org-roam-populate
                   (org-roam-node-from-id (vulpea-note-id note)))))))
             notes))))
    (seq-reduce
     (lambda (r e)
       (seq-intersection
        r e
        (lambda (a b)
          (string-equal (vulpea-note-id a)
                        (vulpea-note-id b)))))
     blinks-all
     (seq-uniq (apply #'append blinks-all)))))
#+end_src

#+RESULTS:
: vulpea-backlinks-many

***** interactive function
#+begin_src elisp
(defun select-backlinks-many ()
  "It's hard to explain."
  (interactive)
  (let* ((notes (vulpea-utils-collect-while
                 #'vulpea-select
                 nil
                 "Note" :require-match t))
         (blinks (vulpea-backlinks-many notes)))
    (completing-read
     "Backlink: "
     (seq-map #'vulpea-note-title blinks))))
#+end_src

** =org-ref= :inactive:
*** install
#+begin_src elisp :tangle no
(package! org-ref)
#+end_src

*** configure
#+begin_src elisp :tangle no
(use-package! org-ref
  :after org
  :init
    (require 'bibtex)
    (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
    (require 'org-ref-arxiv)
    (require 'org-ref-scopus)
    (require 'org-ref-wos)
  :config
  (setq
    org-ref-default-bibliography '("/Users/quirin/promo/bib/references.bib")
    org-ref-pdf-directory "/Users/quirin/promo/bib/pdfs/"
    ;; org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")
    bibtex-completion-bibliography '("/Users/quirin/promo/bib/references.bib")
    bibtex-completion-library-path '("/Users/quirin/promo/bib/pdfs/")
    ;; bibtex-completion-notes-path "~/Dropbox/emacs/bibliography/notes/"
    ;; bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
    bibtex-completion-additional-search-fields '(keywords)
    bibtex-completion-display-formats '(
      (article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
      (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
      (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
      (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
      (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")
    )
    bibtex-completion-pdf-open-function (lambda (fpath) (call-process "open" nil 0 nil fpath))
  )
)
#+end_src

** =org-cite= et al.
*** via =biblio= module only [2021-10-31 Sun]
**** custom settings
***** paths
#+BEGIN_src  elisp
(defvar qw/ref-bib '("/Users/quirin/promo/bib/references.bib"))
(defvar qw/ref-pdfs '("/Users/quirin/promo/bib/pdfs/"))
(defvar qw/ref-notes "/Users/quirin/roam/")

;; (after! bibtex-completion
  (setq org-cite-global-bibliography qw/ref-bib)
  (setq bibtex-completion-bibliography qw/ref-bib)
  (setq bibtex-actions-bibliography qw/ref-bib)
  (setq bibtex-completion-library-path qw/ref-pdfs)
  (setq bibtex-completion-notes-path qw/ref-notes)
  (setq bibtex-actions-library-paths qw/ref-pdfs)
  (setq bibtex-actions-notes-paths qw/ref-notes)
  ;; )
#+END_src

***** assign cite processors to backends
#+begin_src elisp
(after! oc
  (setq org-cite-export-processors '((biblatex authoryear authoryear)
                                     (t csl)
                                     (html csl))))
#+end_src

**** =packages.el=

#+begin_src elisp :tangle packages.el
(package! bibtex-completion :pin "bb47f355b0da8518aa3fb516019120c14c8747c9")
(when (featurep! :completion ivy)
  (package! ivy-bibtex :pin "bb47f355b0da8518aa3fb516019120c14c8747c9"))
(when (featurep! :completion helm)
  (package! helm-bibtex :pin "bb47f355b0da8518aa3fb516019120c14c8747c9"))
(when (featurep! :completion vertico)
  (package! bibtex-actions :pin "e9128d8faf9f6e038eb84a718abba2e415e92fdf"))

(package! citeproc :pin "c8ff95862823cdff067e8cc9bb7f5ef537e8f1d9")
#+end_src

**** =config.el=
#+begin_src elisp
(use-package! bibtex-completion
  :defer t
  :config
  (setq bibtex-completion-additional-search-fields '(keywords)
        bibtex-completion-pdf-field "file"));; This tell bibtex-completion to look at the File field of the bibtex to figure out which pdf to open

(use-package! ivy-bibtex
  :when (featurep! :completion ivy)
  :defer t
  :config
  (add-to-list 'ivy-re-builders-alist '(ivy-bibtex . ivy--regex-plus)))

(use-package! bibtex-actions
  :when (featurep! :completion vertico)
  :after embark bibtex-completion
  :config
  (add-to-list 'embark-keymap-alist '(bib-reference . bibtex-actions-map))
  (when (featurep! +roam2)
    setq bibtex-actions-file-note-org-include '(org-id org-roam-ref)))

(use-package! citeproc
  :defer t)

;;; Org-Cite configuration

(use-package! oc
  :after org bibtex-completion bibtex-actions
  :config
  (require 'ox)
  (map! :map org-mode-map
        :localleader
        :desc "Insert citation" "@" #'org-cite-insert)
  (setq org-cite-global-bibliography
        (let ((paths (or bibtex-actions-bibliography
                         bibtex-completion-bibliography)))
          ;; Always return bibliography paths as list for org-cite.
          (if (stringp paths) (list paths) paths)))
  ;; setup export processor; default csl/citeproc-el, with biblatex for latex
  (setq org-cite-export-processors
        '(
          (latex biblatex)
          (t csl)
          (html csl)
          )))

  ;;; Org-cite processors
(use-package! oc-biblatex
  :after oc)

(use-package! oc-csl
  :after oc)

(use-package! oc-natbib
  :after oc)

;;;; Third-party

(use-package! oc-bibtex-actions
  :when (featurep! :completion vertico)
  :after oc
  :defer t
  :init
  ;; While this processor is registered within 'oc-bibtex-actions', we do it here
  ;; to avoid having to load it upfront.

  ;; the following lines produce the current error
  ;; (org-cite-register-processor 'oc-bibtex-actions
  ;;   :insert (org-cite-make-insert-processor
  ;;            #'oc-bibtex-actions-insert
  ;;            #'oc-bibtex-actions-select-style)
  ;;   :follow #'oc-bibtex-actions-follow
  ;;   :activate #'oc-bibtex-actions-activate)

  (setq org-cite-insert-processor 'oc-bibtex-actions
        org-cite-follow-processor 'oc-bibtex-actions
        org-cite-activate-processor 'oc-bibtex-actions
        ;; The activate processor relies on shift-select, so we set to t.
        org-support-shift-select t)
  :config
  (when (featurep! :lang org +roam2)
    ;; Include property drawer metadata for 'org-roam' v2.
    (setq bibtex-actions-file-note-org-include '(org-id org-roam-ref))))
#+end_src

*** manual setup :inactive:
**** =citeproc= :inactive:
:PROPERTIES:
:ID:       4b0ddf4f-7dc9-4726-9de7-48d5c74db733
:END:

#+begin_src elisp :tangle no
(package! citeproc)
#+end_src

**** =oc= :inactive:

#+begin_src elisp :tangle no
(use-package! oc)
#+end_src

**** =oc-csl= :inactive:

#+begin_src elisp :tangle no
(use-package! oc-csl)
#+end_src

**** =oc-biblatex= :inactive:

#+begin_src elisp :tangle no
(use-package! oc-biblatex)
#+end_src

**** =bibtex-completion= :inactive:

#+begin_src elisp :tangle no
(use-package! bibtex-completion)
#+end_src

**** =bibtex-actions= :inactive:

#+begin_src elisp :tangle no
(use-package! bibtex-actions
  :bind (("C-c b" . bibtex-actions-insert-citation)
         :map minibuffer-local-map
         ("M-b" . bibtex-actions-insert-preset))
  :after (embark bibtex-completion)
  :config
  (add-to-list 'embark-target-finders 'bibtex-actions-citation-key-at-point)
  (add-to-list 'embark-keymap-alist '(bib-reference . bibtex-actions-map))
  (add-to-list 'embark-keymap-alist '(citation-key . bibtex-actions-buffer-map))
  (setq bibtex-actions-bibliography '("~/promo/bib/references.bib"))

;; use consult-completing-read for enhanced interface
(advice-add #'completing-read-multiple :override #'consult-completing-read-multiple))
#+end_src

#+RESULTS:
: bibtex-actions-insert-preset

**** =oc-bibtex-actions=

***** install :inactive:

#+begin_src elisp :tangle no
(package! bibtex-actions
  :recipe (:host github
           :repo "bdarcus/bibtex-actions"))
#+end_src

***** configure :inactive:

#+begin_src elisp :tangle no
(defvar my/bibs '("~promo/bib/references.bib"))

(use-package oc-bibtex-actions
  :bind (("C-c b" . org-cite-insert)
         ("M-o" . org-open-at-point)
         :map minibuffer-local-map
         ("M-b" . bibtex-actions-insert-preset))
  :after (embark oc)
  :config
  (setq bibtex-actions-bibliography my/bibs
        org-cite-global-bibliography my/bibs
        org-cite-insert-processor 'oc-bibtex-actions
        org-cite-follow-processor 'oc-bibtex-actions
        org-cite-activate-processor 'oc-bibtex-actions))

;; Use consult-completing-read for enhanced interface.
(advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
#+end_src
source: https://github.com/bdarcus/bibtex-actions

#+begin_src elisp :tangle no
(setq bibtex-actions-at-point-function 'embark-act)
#+end_src

**** =bibtex-actions= templates :inactive:

#+begin_src elisp :tangle no
(setq bibtex-actions-templates
      '((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
        (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
        (note . "#+title: Notes on ${author editor}, ${title}")))
#+end_src

**** using =all-the-icons= for =bibtex-actions= :inactive:

#+begin_src elisp :tangle no
(setq bibtex-actions-symbols
  `((file . (,(all-the-icons-icon-for-file "foo.pdf" :face 'all-the-icons-dred) .
            ,(all-the-icons-icon-for-file "foo.pdf" :face 'bibtex-actions-icon-dim)))
    (note . (,(all-the-icons-icon-for-file "foo.txt") .
            ,(all-the-icons-icon-for-file "foo.txt" :face 'bibtex-actions-icon-dim)))
    (link .
        (,(all-the-icons-faicon "external-link-square" :v-adjust 0.02 :face 'all-the-icons-dpurple) .
        ,(all-the-icons-faicon "external-link-square" :v-adjust 0.02 :face 'bibtex-actions-icon-dim)))))
;; Here we define a face to dim non 'active' icons, but preserve alignment
(defface bibtex-actions-icon-dim
    '((((background dark)) :foreground "#282c34")
     (((background light)) :foreground "#fafafa"))
     "Face for obscuring/dimming icons"
     :group 'all-the-icons-faces)
#+end_src
source: https://github.com/bdarcus/bibtex-actions

#+RESULTS:
: bibtex-actions-icon-dim
** =org-download=
*** installation

#+begin_src elisp :tangle packages.el
(package! org-download
  :recipe (:host github
           :repo "abo-abo/org-download"))
#+end_src

*** configuration
#+begin_src elisp
(use-package! org-download
  :after org
  :config
  (setq-default org-download-image-dir "./img/")
  (setq-default org-download-heading-lvl nil)
  (setq org-download-annotate-function (lambda (_link) ""))
  (map!
   :leader
   :prefix "j l"
   :desc "org-download-clipboard" "c" #'org-download-clipboard
   :desc "org-download-rename-last-file" "r" #'org-download-rename-last-file
   )
  )
#+END_SRC

** =org-transclusion=
*** install
#+begin_src elisp :tangle packages.el
(package! org-transclusion
  :recipe (:host github
           :repo "nobiot/org-transclusion"
           :branch "main"
           :files ("*.el")))
#+end_src

*** configure
#+begin_src elisp :tangle yes
(use-package! org-transclusion
  :config
  (set-face-attribute
   'org-transclusion-fringe nil
   :foreground "#999966"
   :background "#999966")

  (set-face-attribute
   'org-transclusion-source-fringe nil
   :foreground "#999966"
   :background "#999966")

  (add-to-list 'org-transclusion-extensions 'org-transclusion-indent-mode)
  (require 'org-transclusion-indent-mode)
  )
#+end_src
** =org-bookmark-heading=
for bookmarking org headings
*** install

#+begin_src elisp :tangle packages.el
(package! org-bookmark-heading
  :recipe (:host github
           :repo "alphapapa/org-bookmark-heading"))
#+end_src

*** configure

#+begin_src elisp
(use-package! org-bookmark-heading)
#+end_src
** =org-tree-slide= :inactive:

#+begin_src elisp :tangle no
(after! org-tree-slide
  (advice-remove 'org-tree-slide--display-tree-with-narrow
                 #'+org-present--narrow-to-subtree-a)
  (advice-remove 'org-tree-slide--display-tree-with-narrow
                 #'+org-present--hide-first-heading-maybe-a)
  )
#+end_src

source for =advice-remove=: https://github.com/hlissner/doom-emacs/issues/4646

* workspaces
#+begin_src elisp
(map!
 :leader
 :desc "switch workspace" "y" #'+workspace/switch-to)
#+end_src
* =dired=
** hide details by default
#+BEGIN_SRC emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode))))
#+END_SRC

** delete files to Trash
#+BEGIN_SRC emacs-lisp
(after! dired
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash"))
#+END_SRC

** bindings for folders
#+BEGIN_SRC elisp
(map!
 :leader
 :prefix "j d"
 :desc "open home" "h" (lambda () (interactive) (find-file "~"))
 :desc "open Desktop" "d" (lambda () (interactive) (find-file "~/Desktop"))
 :desc "open promo" "p" (lambda () (interactive) (find-file "~/promo"))
 :desc "open Lehre" "l" (lambda () (interactive) (find-file "~/promo/lehre"))
 :desc "open bib/pdfs" "b" (lambda () (interactive) (find-file "~/promo/bib/pdfs"))
 :desc "open Volumes" "v" (lambda () (interactive) (find-file "/Volumes"))
 :desc "open orgzly" "o" (lambda () (interactive) (find-file "~/Dropbox/orgzly"))
 )
#+END_SRC
* =anki-editor=
** install
#+begin_src elisp :tangle packages.el
(package! anki-editor)
#+end_src

** configure
#+begin_src elisp
(use-package anki-editor
  :after org
  :init
  (setq-default anki-editor-use-math-jax t)
  :config
  (map!
   :leader
   :prefix "j a"
   :desc "anki-editor / insert note" "i" #'anki-editor-insert-note
   :desc "anki-editor / push notes" "p" #'anki-editor-push-notes
   :desc "anki-editor / mode" "m" #'anki-editor-mode
   )
  (fset 'anki-editor-copy-heading
        (kmacro-lambda-form [?v ?_ ?l ?l ?y ?j ?j ?j ?o escape ?p ?j ?j ?j ?i] 0 "%d"))
  (map!
    :leader
    :prefix "j a"
    :desc "wrap extracted text in quote block" "h" #'anki-editor-copy-heading)
  )
#+end_src

* =deft=
#+begin_src elisp
(use-package! deft
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/roam/"))
#+end_src
* =LaTeX=
** set bibliography path
#+begin_src elisp
(setq reftex-default-bibliography "~/promo/bib/references.bib")
#+end_src

** set viewer app
#+BEGIN_SRC elisp
(setq +latex-viewers '(skim))
#+END_SRC

* emojis
#+begin_src elisp
(map!
 :leader
 :prefix "i"
 :desc "insert emoji" "e" #'emojify-insert-emoji
 )
#+end_src
* =org-file-apps=
#+begin_src elisp
(setq org-file-apps
      '(
        (remote . emacs)
        (auto-mode . emacs)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . default)
        ))
#+end_src
