#+startup: overview
#+title: Doom Emacs configuration
#+author: Quirin Würschinger
#+property: header-args :results silent :tangle yes

* personal info
#+BEGIN_SRC elisp
(setq user-full-name "Quirin Würschinger"
     user-mail-address "q.wuerschinger@gmail.com")
#+END_SRC

* use =Alt= key for non-ASCII chars
#+begin_src elisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)

#+end_src
source: https://stackoverflow.com/a/3378391
* binding for universal argument

#+begin_src elisp
(map!
 :desc "universal argument"
 "C-M-u" #'universal-argument)
#+end_src

* font
** set fonts and sizes

#+BEGIN_SRC elisp :tangle yes
(setq doom-font (font-spec :family "JetBrains Mono":size 18))
(setq doom-variable-pitch-font (font-spec :family "Noto Serif" :size 18))
#+END_SRC

other options: [[id:3f2f2ed3-dfc4-4bcd-a50a-8da7aafd8596][fonts]]

*** KILL adjust font size for =mixed-pitch-mode= :inactive:

#+begin_src elisp :tangle no
(use-package! mixed-pitch
  :config
  (setq mixed-pitch-set-heigth t)
  (set-face-attribute 'variable-pitch nil :height 3))
#+end_src

#+begin_src elisp :tangle no
(setq doom-font (font-spec :family "Fira Code" :size 18 :height 1.0)
      doom-variable-pitch-font (font-spec :family "Gentium Plus" :height 3)
      )
#+end_src

*** disable variable pitch font for =treemacs=

#+begin_src elisp
(setq doom-themes-treemacs-enable-variable-pitch nil)
#+end_src

** change font size

#+begin_src elisp
(defhydra hydra-zoom ()
  "zoom"
  ("k" text-scale-increase "in")
  ("j" text-scale-decrease "out"))

(map!
 :leader
 :desc "zoom hydra" "f s" #'hydra-zoom/body
 )
#+end_src

* modeline
** decrease size

#+begin_src elisp :results silent
(after! doom-modeline
  (setq doom-modeline-height 1)
  (set-face-attribute 'mode-line nil :height 150)
  (set-face-attribute 'mode-line-inactive nil :height 150))
#+end_src

* buffers and files
** kill buffer and window
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "kill buffer and window" "b D" #'kill-buffer-and-window)
#+END_SRC
** copy file (to current dir)
#+BEGIN_SRC elisp
(map!
 :leader
 :prefix "j"
 :desc "copy file here" "c" #'copy-file)
#+END_SRC

** move file (to current dir)
#+BEGIN_SRC elisp
(map!
 :leader
 :prefix "j"
 :desc "move file here" "m" #'rename-file)
#+END_SRC
** save all buffers & session

#+begin_src elisp
(defun q/save-buffers-and-session ()
  (interactive)
  (evil-write-all nil)
  (doom/quicksave-session)
  )
#+end_src

#+begin_src elisp
(map!
 :desc "save buffers & session"
 :leader
 :prefix "j"
 "s" #'q/save-buffers-and-session
 )
#+end_src

* windows and frames
** switch windows using =ace-window=
*** keybinding

#+begin_src elisp
(map!
 :desc "ace-window"
 :leader
 "w w" #'ace-window
 )
#+end_src

*** enable switching to =treemacs= window

#+begin_src elisp
(after! (:and treemacs ace-window)
  (setq aw-ignored-buffers (delq 'treemacs-mode aw-ignored-buffers)))
#+end_src
https://github.com/hlissner/doom-emacs/issues/1177#issuecomment-464936107

** hydra for managing windows
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :prefix "j"
 :desc "resize windows" "r" #'+hydra/window-nav/body)
#+END_SRC
** toggle horizontal vs. vertical window split

#+begin_src elisp
(defun window-split-toggle ()
  "Toggle between horizontal and vertical split with two windows."
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows!")
    (let ((func (if (window-full-height-p)
                    #'split-window-vertically
                  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
        (other-window 1)
        (switch-to-buffer (other-buffer))))))
#+end_src
[[https://emacs.stackexchange.com/a/5372][How to change Emacs windows from vertical split to horizontal split? - Emacs ...]]
** switch frames

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "switch frames" "f o" #'other-frame)
#+END_SRC

* editing
** expand region
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :prefix ("j e" . "expand")
 :desc "region" "r" #'er/expand-region)
#+END_SRC

** multiple cursors
*** hydra for =evil-mc=
source: [[https://hungyi.net/posts/hydra-for-evil-mc/][An evil-mc Emacs Hydra - Hung-Yi’s Journal]]
#+begin_src elisp
(defhydra my-mc-hydra (:color pink
                       :hint nil
                       :pre (evil-mc-pause-cursors))
  "
^Match^            ^Line-wise^           ^Manual^
^^^^^^----------------------------------------------------
_Z_: match all     _J_: make & go down   _z_: toggle here
_m_: make & next   _K_: make & go up     _r_: remove last
_M_: make & prev   ^ ^                   _R_: remove all
_n_: skip & next   ^ ^                   _p_: pause/resume
_N_: skip & prev

Current pattern: %`evil-mc-pattern

"
  ("Z" #'evil-mc-make-all-cursors)
  ("m" #'evil-mc-make-and-goto-next-match)
  ("M" #'evil-mc-make-and-goto-prev-match)
  ("n" #'evil-mc-skip-and-goto-next-match)
  ("N" #'evil-mc-skip-and-goto-prev-match)
  ("J" #'evil-mc-make-cursor-move-next-line)
  ("K" #'evil-mc-make-cursor-move-prev-line)
  ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
  ("r" #'+multiple-cursors/evil-mc-undo-cursor)
  ("R" #'evil-mc-undo-all-cursors)
  ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
  ("q" #'evil-mc-resume-cursors "quit" :color blue)
  ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))

(map!
 (:when (featurep! :editor multiple-cursors)
  :prefix "g"
  :nv "z" #'my-mc-hydra/body))
#+end_src
** set =yasnippets= completion key

#+begin_src elisp
(after! yasnippet
  (define-key yas-minor-mode-map (kbd "<") yas-maybe-expand))
#+end_src
** move lines up/down using =drag-stuff=

#+begin_src elisp :tangle packages.el
(package! drag-stuff)
#+end_src

#+begin_src elisp
(use-package! drag-stuff
  :init
  (map!
   :desc "move line up" "M-p" #'drag-stuff-up
   :desc "move line down" "M-n" #'drag-stuff-down
   :desc "move word left" "M-b" #'drag-stuff-left
   :desc "move word down" "M-ü" #'drag-stuff-right
   )
   )
#+end_src
** break paragraph into lines

#+begin_src elisp :results silent
(defun p2l ()
  "Format current paragraph into single lines."
  (interactive "*")
  (save-excursion
    (forward-paragraph)
    (let ((foo (point)))
      (backward-paragraph)
      (replace-regexp "\n" " " nil (1+ (point)) foo)
      (backward-paragraph)
      (replace-regexp "\\.\s ?" ".\n" nil (point) foo)
      (backward-paragraph)
      (replace-regexp "; ?" ";\n" nil (point) foo)
      (backward-paragraph)
      (replace-regexp "\? ?" "?\n" nil (point) foo)
      (backward-paragraph)
      (replace-regexp "\! ?" "!\n" nil (point) foo)
      )))
#+end_src

This is an example.
Multiple sentences.
What about question marks?
And abbreviations, e.g.
/i.e./.
and semicolons;
dot.ted And exlamation marks!
And more.

* =projectile=
** set projects
#+BEGIN_SRC elisp
(after! projectile
  (setq projectile-known-projects '(
                                    ;; private
                                    "~/.doom.d/"
                                    "~/org/"
                                    "~/roam/"
                                    "~/temp/latex/"
                                    "~/Dropbox/orgzly/"

                                    ;; teaching
                                    "~/promo/lehre/2021-22_ps_itl/"
                                    "~/promo/lehre/2021-22_sem_morph-wf/"

                                    ;; projects
                                    "~/promo/neocrawler/"
                                    "~/promo/sna/"
                                    "~/promo/AngloSaxon/"
                                    "~/promo/socemb/"
                                    "~/promo/NeoCov/"
                                    )))
#+END_SRC

** switch between workspaces
#+begin_src elisp
(map!
 :leader
 :desc "switch workspace" "y" #'+workspace/switch-to)
#+end_src
* =org-mode=
** fold files on startup
backup: ~(setq-default org-startup-folded t)~
#+BEGIN_SRC elisp
(after! org
  (setq org-startup-folded t))
#+END_SRC

** fold non-active trees
*** basic function

#+begin_src elisp
(defun org-show-current-heading-tidily ()
  (interactive)
  "Show next entry, keeping other entries closed."
  (dotimes (_ 2)
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-back-to-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children))
    )
  )
#+end_src

*** keybinding

#+begin_src elisp
  (map!
   :leader
   :prefix "j"
   :desc "fold other trees" "j" #'org-show-current-heading-tidily)
#+end_src

** org dir
#+BEGIN_SRC elisp
(setq org-directory "~/org/")
#+END_SRC
 org
** agenda
*** open my agenda view

#+BEGIN_SRC elisp
(after! org
  (defun q/org-agenda ()
    "My personal agenda view."
    (interactive)
    (setq org-agenda-start-with-log-mode t)
    (org-agenda nil "a")
    (org-agenda-day-view)
    (org-agenda-goto-today)
    )

  (map!
   :desc "open agenda"
   :leader
   :prefix "j"
   "Q" #'q/org-agenda)
  )
#+END_SRC
*** start on Mondays

#+begin_src elisp
(after! org
  (setq org-agenda-start-on-weekday 1))
#+end_src

*** switch to agenda keybinding
**** macro

#+begin_src elisp
(fset 'switch-to-agenda-buffer
   (kmacro-lambda-form [?  ?b ?B ?o ?r ?g ?  ?a ?g ?e ?n ?d ?a return] 0 "%d"))

#+end_src

**** keybinding

#+begin_src emacs-lisp
(map!
 :desc "switch to agenda"
 :leader
 :prefix "j"
 "q" #'switch-to-agenda-buffer)
#+end_src

*** agenda files

#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-files (list
                          "~/org/rout.org"
                          "~/org/privat.org"
                          "~/org/method.org"
                          "~/org/work.org"
                          "~/org/legenda.org"
                          "~/org/videnda.org"
                          "~/org/audenda.org"
                          )
        )
  )
#+END_SRC

*** include archive files
#+begin_src elisp
(setq org-agenda-archives-mode 't)
#+end_src

*** agenda view / sorting strategy

#+begin_src elisp
(setq org-agenda-sorting-strategy
      '(
        (agenda time-up priority-down)
        (todo priority-down category-keep)
        (tags priority-down category-keep)
        (search category-keep)
        )
      )
#+end_src

*** log todo states to drawer

#+begin_src elisp :results silent
(setq org-log-into-drawer "CHANGEBOOK")
#+end_src

*** clocking
**** clock into drawer

#+BEGIN_SRC elisp
(after! org
  (setq org-clock-into-drawer "LOGBOOK"))
#+END_SRC

**** clocking status
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-clock-mode-line-total 'current))
#+END_SRC

**** clocktable by tags
- source
  + Stack Overflow / comment: https://emacs.stackexchange.com/a/32182/29471
  + gist: https://gist.github.com/ironchicken/6b5424bc2024b3d0a58a8a130f73c2ee
- my adjustment:
  - set column width to =19= to fit on split windows
  - file names could be removed by commenting out the respective lines below

#+begin_src elisp
(defun clocktable-by-tag/shift-cell (n)
  (let ((str ""))
    (dotimes (i n)
      (setq str (concat str "| ")))
    str))

(defun clocktable-by-tag/insert-tag (params)
  (let ((tag (plist-get params :tags)))
    (insert "|--\n")
    (insert (format "| %s | *Tag time* |\n" tag))
    (let ((total 0))
      (mapcar
       (lambda (file)
         (let ((clock-data (with-current-buffer (find-file-noselect file)
                             (org-clock-get-table-data (buffer-name) params))))
           (when (> (nth 1 clock-data) 0)
             (setq total (+ total (nth 1 clock-data)))
             (insert (format "| | File *%s* | %.2f |\n"
                             (file-name-nondirectory file)
                             (/ (nth 1 clock-data) 60.0)))
             (dolist (entry (nth 2 clock-data))
               (insert (format "| | . %s%s | %s %.2f |\n"
                               (org-clocktable-indent-string (nth 0 entry))
                               (nth 1 entry)
                               (clocktable-by-tag/shift-cell (nth 0 entry))
                               (/ (nth 4 entry) 60.0)))))))
       (org-agenda-files))
      (save-excursion
        (re-search-backward "*Tag time*")
        (org-table-next-field)
        (org-table-blank-field)
        (insert (format "*%.2f*" (/ total 60.0)))))
    (org-table-align)))

(defun org-dblock-write:clocktable-by-tag (params)
  (insert "| Tag | Headline | Time (h) |\n")
  (insert "|     | <l18>    | <r>  |\n")
  (let ((tags (plist-get params :tags)))
    (mapcar (lambda (tag)
              (clocktable-by-tag/insert-tag (plist-put (plist-put params :match tag) :tags tag)))
            tags)))
#+end_src
**** don't remove clocking durations of =0=

#+begin_src elisp
(setq org-clock-out-remove-zero-time-clocks nil)
#+end_src

*** hide repeating items
#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-show-future-repeats nil))
#+END_SRC

*** hide =DONE= from agenda
#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-skip-scheduled-if-done t))
#+END_SRC
*** set deadline warning days

#+begin_src elisp
(setq org-deadline-warning-days 3)
#+end_src
*** bulk set priorities

#+begin_src elisp
(setq org-agenda-bulk-custom-functions '((?P (lambda nil (org-agenda-priority 'set)))))
#+end_src

*** shifting timestamps

#+begin_src elisp
(map!
 :after evil-org
 :map evil-org-mode-map
 :n "C-h" #'org-shiftleft
 :n "C-j" #'org-shiftdown
 :n "C-k" #'org-shiftup
 :n "C-l" #'org-shiftright
 )
#+end_src
*** calendar start weekday on Mondays

#+begin_src elisp
(after! org
  (setq calendar-week-start-day 1))
#+end_src

*** =org-super-agenda=
**** install

#+begin_src elisp :tangle packages.el
(package! org-super-agenda)
#+end_src

**** configure

fix to exclude active datestamps from time grid:

#+begin_src elisp
(defun my-org-hour-specification-p (item)
  (s-matches? "[0-9][0-9]?:[0-9][0-9]" item))
#+end_src
[[https://github.com/alphapapa/org-super-agenda/issues/204#issue-1007461284][alphapapa/org-super-agenda#204 :with-time argument for timestamp selectors]]

#+begin_src elisp
(use-package! org-super-agenda
  :after org
  :init
  ;; fix to retain evil bindings for Doom Emacs from GitHub issue in package repo; source: [[https://github.com/alphapapa/org-super-agenda/issues/50][alphapapa/org-super-agenda#50 Some keybindings not working at heading]]
  (setq org-super-agenda-header-map (make-sparse-keymap))
  :hook
  (after-init . org-super-agenda-mode)
  :config
  (setq org-super-agenda-groups
        ;; no grouping by priority automatically: ~(:name "prio" :priority>= "9" :order 5)~
        '(
          (:name "time" :pred my-org-hour-specification-p)
          (:name "overdue" :scheduled past)
          (:name "prio" :auto-priority)
          (:name "rout" :tag "rout")
          (:name "work" :tag "work")
          (:name "privat" :tag "privat")
          (:name "method" :tag "method")
          )
        )
  )
#+end_src

** capture templates

#+begin_src elisp :results silent
(after! org
  (setq org-capture-templates
        '(
          ("p" "todo / privat" entry
           (file "~/org/privat.org")
           (file "~/.doom.d/capt-templ/task.org")
           :prepend t
           :empty-lines 1
           )
          ("w" "todo / work" entry
           (file "~/org/work.org")
           (file "~/.doom.d/capt-templ/task.org")
           :prepend t
           :empty-lines 1
           )
          ("v" "videnda" entry
           (file "~/org/videnda.org")
           "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:"
           (file "~/.doom.d/capt-templ/medium.org")
           :prepend t
           :empty-lines 1
           )
          ("a" "audenda" entry
           (file "~/org/audenda.org")
           (file "~/.doom.d/capt-templ/medium.org")
           :prepend t
           :empty-lines 1
           )
          ("l" "legenda" entry
           (file "~/org/legenda.org")
           (file "~/.doom.d/capt-templ/medium.org")
           :prepend t
           :empty-lines 1
           )
          )
        )
  )
#+end_src

** use IDs for links

#+begin_src elisp
(setq org-id-link-to-org-use-id 'use-existing)
#+end_src

** image width
#+begin_src elisp
(after! org
  (setq org-image-actual-width 500))
#+end_src

** subtree operations
*** mark
#+begin_src elisp
(map!
 :leader
 :desc "org-mark-subtree" "m s v" #'org-mark-subtree)
#+end_src
*** cut
#+begin_src elisp
(map!
 :leader
 :desc "org-cut-special" "m s d" #'org-cut-special)
#+end_src

*** copy
#+begin_src elisp
(map!
 :leader
 :desc "org-copy-special" "m s y" #'org-copy-special)
#+end_src

*** paste
#+begin_src elisp
(map!
 :leader
 :desc "org-paste-special" "m s p" #'org-paste-special)
#+end_src

*** widen
#+begin_src elisp
(map!
 :leader
 :desc "org-paste-subtree" "m s w" #'widen)
#+end_src
** insert stuff
*** insert datetime / inactive
#+BEGIN_SRC elisp
(defun q/insert-timestamp-inactive ()
  (interactive)
  (let ((current-prefix-arg '(16)))
    (call-interactively 'org-time-stamp-inactive)))
#+END_SRC
[[https://emacs.stackexchange.com/questions/12130/how-to-insert-inactive-timestamp-via-function][source]]

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "timestamp" "i t" #'q/insert-timestamp-inactive
 )
#+END_SRC

*** insert date / inactive
#+BEGIN_SRC elisp
(map!
 :leader
 :desc "datestamp" "i d" #'org-time-stamp-inactive)
#+END_SRC

*** insert file link

#+BEGIN_SRC elisp
(defun q/insert-file-link ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'org-insert-link)))
#+END_SRC

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "insert file link" "l" #'q/insert-file-link)
#+END_SRC

*** insert file path
#+begin_src elisp
(defun my-counsel-insert-file-path ()
  "Insert file path."
  (interactive)
  (unless (featurep 'counsel) (require 'counsel))
  (ivy-read "Find file: " 'read-file-name-internal
            :matcher #'counsel--find-file-matcher
            :action
            (lambda (x)
              (insert x))))

(map!
 :leader
 :desc "insert file path" "L" #'my-counsel-insert-file-path)
#+end_src
source: https://emacs.stackexchange.com/a/39107/29471

*** insert checkbox

#+BEGIN_SRC elisp
(defun q/toggle-checkbox ()
  (interactive)
  (let
      ((current-prefix-arg '(4)))
    (call-interactively 'org-toggle-checkbox)))
#+END_SRC

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "insert checkbox" "c h" #'q/toggle-checkbox)
#+END_SRC

** export
*** keybinding for using last export action

#+begin_src elisp
(defun q/org-export-dispatch-last ()
  (interactive)
  (let
      ((current-prefix-arg '(4)))
    (call-interactively 'org-export-dispatch)))
#+end_src

#+begin_src elisp
(map!
 :desc "q/org-export-dispatch-last"
 :leader
 :prefix "m"
 "E" #'q/org-export-dispatch-last
 )
#+end_src

*** format datetime stamps
**** remove brackets
source: https://stackoverflow.com/a/33716338/4165300

#+BEGIN_SRC elisp
(defun org-export-filter-timestamp-remove-brackets (timestamp backend info)
  "removes relevant brackets from a timestamp"
  (cond
   ((org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "[<>]\\|[][]" "" timestamp))
   ((org-export-derived-backend-p backend 'html)
    (replace-regexp-in-string "&[lg]t;\\|[][]" "" timestamp))
   )
  )

(eval-after-load 'ox '(add-to-list
                       'org-export-filter-timestamp-functions
                       'org-export-filter-timestamp-remove-brackets))
#+END_SRC
**** custom format
#+begin_src elisp
(setq org-time-stamp-custom-formats '("%e %B, %Y" . "%e %B, %Y, %H:%M h"))

(defun my-org-export-ensure-custom-times (backend)
  (setq-local org-display-custom-times t)
  )

(add-hook 'org-export-before-processing-hook 'my-org-export-ensure-custom-times)
#+end_src
https://emacs.stackexchange.com/a/34436/29471
*** to =LaTeX=
**** don't center tables
#+begin_src elisp
(setq org-latex-tables-centered nil)
#+end_src

**** always use =booktabs=

#+BEGIN_SRC elisp
(after! org
  (setq org-latex-tables-booktabs t))
#+END_SRC

#+begin_src elisp
(setq org-latex-packages-alist '())
(add-to-list 'org-latex-packages-alist '("" "booktabs"))
#+end_src
**** ignore headings with =ignore= tag

#+begin_src elisp
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_src

*** via =odt= to =docx=

#+begin_src elisp
(setq org-odt-preferred-output-format "docx")
#+end_src

** =org-tables=
*** shrink
#+BEGIN_SRC emacs-lisp
(after! org
  (map!
   :leader
   :desc "shrink table" "t s" #'org-table-shrink))
#+END_SRC

*** expand
#+BEGIN_SRC emacs-lisp
(after! org
  (map!
   :leader
   :desc "expand table" "t e" #'org-table-expand))
#+END_SRC
*** =orgtbl-aggregate=
**** install

#+begin_src elisp :tangle packages.el
(package! orgtbl-aggregate)
#+end_src

*** =orgtbljoin=
**** install

#+begin_src elisp :tangle packages.el
(package! orgtbl-join
  :recipe (:host github
           :repo "tbanel/orgtbljoin"))
#+end_src

**** config

#+begin_src elisp
(use-package! orgtbl-join
  :after org)
#+end_src
*** =org-pretty-tables=

should be included in Doom emacs via the =+pretty= flag for =org=, but doesn't currently work for me

#+begin_src elisp :tangle packages.el
(package! org-pretty-table
  :recipe (:host github
           :repo "Fuco1/org-pretty-table"))
#+end_src

#+begin_src elisp
(use-package! org-pretty-table ; "prettier" tables
  :hook (org-mode . org-pretty-table-mode))
#+end_src

** =org-babel=
*** default arguments for =jupyter-python=
for [[file:../roam/20210822112618-ipython.org][IPython]] source blocks
#+begin_src elisp
(setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                     (:kernel . "qw")
                                                     (:session . "jupy")
                                                     ))
#+end_src
*** default header arguments: don't evaluate for export

#+begin_src elisp
(after! org
  (setq org-babel-default-header-args
        (cons '(:eval . "no-export")
              (assq-delete-all :noweb org-babel-default-header-args))))
#+end_src
** =org-roam=
*** config
#+BEGIN_SRC emacs-lisp
(use-package! org-roam
  :after org
  :hook
    (after-init . org-roam-mode)
  :custom
    (org-roam-directory "~/roam")
    (org-roam-dailies-directory "journal")
    (org-roam-graph-viewer "/usr/bin/open")
  :init
    (setq org-roam-dailies-capture-templates
            '(("d" "default" entry
            "* %?"
            :target (file+head
                        "%<%Y-%m-%d>.org"
                        "#+TITLE: %<%A, %d %B %Y>\n#+PROPERTY: quality \n#+PROPERTY: privat \n#+PROPERTY: work \n \n* Affirm\n- \n* Dank\n** \n* Was will ich heute machen?\n** TODO\n* Wie war mein Tag?\n** \n* Clocktable\n#+begin: clocktable-by-tag :tags (\"work\" \"privat\" \"rout\" \"method\") :maxlevel 1 :block %<%Y-%m-%d>\n#+end:")))
    ;; (setq org-roam-capture-templates
    ;;         '(("r" "bibliography reference" plain
    ;;         "%?"
    ;;         :target
    ;;         (file+head "${citekey}.org" "#+title: ${citekey}\n#+filetags:\n")
    ;;         :unnarrowed t)))
            )
  :config
    (setq +org-roam-open-buffer-on-find-file nil)
    (setq org-roam-graph-exclude-matcher '("dailies"))
    (setq org-roam-file-exclude-regexp "logseq/bak")

  (map!
   :leader
   :prefix "r"
   :desc "sidebar" "r" #'org-roam-buffer-toggle
   :desc "find file" "f" #'org-roam-node-find
   :desc "insert" "i" #'org-roam-node-insert
   :desc "add alias" "a" #'org-roam-alias-add
   :desc "add ref" "c" #'org-roam-ref-add
   :desc "add tag" "l" #'org-roam-tag-add
   :desc "sync DB" "s" #'org-roam-db-sync
   :desc "d / yesterday" "y" #'org-roam-dailies-goto-yesterday
   :desc "d / today" "t" #'org-roam-dailies-goto-today
   :desc "d / tomorrow" "m" #'org-roam-dailies-goto-tomorrow
   :desc "d / date" "d" #'org-roam-dailies-goto-date
   :desc "d / previous" "p" #'org-roam-dailies-goto-previous-note
   :desc "d / next" "n" #'org-roam-dailies-goto-next-note
   )
  )
#+END_SRC

*** =org-roam=bibtex= :inactive:
**** install
#+begin_src elisp :tangle no
(package! org-roam-bibtex
  :recipe (:host github
           :repo "org-roam/org-roam-bibtex"))
#+end_src

**** configure
#+begin_src elisp :tangle no
(use-package! org-roam-bibtex
  :after org-roam)
#+end_src

*** =org-roam-ui=
**** install
#+begin_src elisp :tangle packages.el
(unpin! org-roam)
(package! websocket)
(package! org-roam-ui
  :recipe (
           :host github
           :repo "org-roam/org-roam-ui"
           :files ("*.el" "out")))
#+end_src

**** config
#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
*** =vulpea=
**** install
#+begin_src elisp :tangle packages.el
(package! vulpea
  :recipe (:host github
           :repo "d12frosted/vulpea"))
#+end_src

**** configure
#+begin_src elisp :tangle yes
(use-package! vulpea)
#+end_src
**** [[id:b33061d6-d377-4403-941d-ff7e25aa5c08][search for backlinks intersection]]
***** basic function
#+begin_src elisp
(defun vulpea-backlinks-many (notes)
  "Return notes that link to all NOTES at the same time."
  (let* ((blinks-all
          (emacsql-with-transaction (org-roam-db)
            (seq-map
             (lambda (note)
               (seq-map
                #'vulpea-db--from-node
                (seq-map
                 #'org-roam-backlink-source-node
                 (org-roam-backlinks-get
                  (org-roam-populate
                   (org-roam-node-from-id (vulpea-note-id note)))))))
             notes))))
    (seq-reduce
     (lambda (r e)
       (seq-intersection
        r e
        (lambda (a b)
          (string-equal (vulpea-note-id a)
                        (vulpea-note-id b)))))
     blinks-all
     (seq-uniq (apply #'append blinks-all)))))
#+end_src

#+RESULTS:
: vulpea-backlinks-many

***** interactive function
#+begin_src elisp
(defun select-backlinks-many ()
  "It's hard to explain."
  (interactive)
  (let* ((notes (vulpea-utils-collect-while
                 #'vulpea-select
                 nil
                 "Note" :require-match t))
         (blinks (vulpea-backlinks-many notes)))
    (completing-read
     "Backlink: "
     (seq-map #'vulpea-note-title blinks))))
#+end_src

** =org-ref= :inactive:
*** install
#+begin_src elisp :tangle no
(package! org-ref)
#+end_src

*** configure
#+begin_src elisp :tangle no
(use-package! org-ref
  :after org
  :init
    (require 'bibtex)
    (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
    (require 'org-ref-arxiv)
    (require 'org-ref-scopus)
    (require 'org-ref-wos)
  :config
  (setq
    org-ref-default-bibliography '("/Users/quirin/promo/bib/references.bib")
    org-ref-pdf-directory "/Users/quirin/promo/bib/pdfs/"
    ;; org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")
    bibtex-completion-bibliography '("/Users/quirin/promo/bib/references.bib")
    bibtex-completion-library-path '("/Users/quirin/promo/bib/pdfs/")
    ;; bibtex-completion-notes-path "~/Dropbox/emacs/bibliography/notes/"
    ;; bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
    bibtex-completion-additional-search-fields '(keywords)
    bibtex-completion-display-formats '(
      (article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
      (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
      (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
      (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
      (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")
    )
    bibtex-completion-pdf-open-function (lambda (fpath) (call-process "open" nil 0 nil fpath))
  )
)
#+end_src

** =org-cite= et al.
*** my paths

#+BEGIN_src  elisp
(defvar qw/ref-bib '("/Users/quirin/promo/bib/references.bib"))
(defvar qw/ref-pdfs '("/Users/quirin/promo/bib/pdfs/"))
(defvar qw/ref-notes '("/Users/quirin/roam/"))
#+END_src

*** assign cite processors to backends :inactive:

#+begin_src elisp :tangle no
(after! oc
  (setq org-cite-export-processors '((biblatex authoryear authoryear)
                                     (t csl)
                                     (html csl))))
#+end_src

*** =citar=
**** install

#+begin_src elisp :tangle packages.el
(package! citar
  :recipe (:host github
           :repo "bdarcus/citar"
           :branch "main"
           :files ("*.el")))
#+end_src

**** config
***** basic

#+begin_src elisp
(use-package citar
  :no-require
  :custom
  (org-cite-global-bibliography qw/ref-bib)
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)

  :bind
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert))

  :config
  (setq citar-library-paths qw/ref-pdfs)
  (setq citar-bibliography qw/ref-bib)
  (setq citar-notes-paths qw/ref-notes)
  )
#+end_src

***** icons

#+begin_src elisp
(setq citar-symbols
      `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
        (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
        (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
(setq citar-symbol-separator "  ")
#+end_src
**** keybindings

#+begin_src emacs-lisp
(map!
 :leader
 :prefix-map ("j z" . "zitations")
 :desc "insert citation" "i" #'citar-insert-citation
 :desc "open" "o" #'citar-open
 :desc "refresh" "r" #'citar-refresh
 )
#+end_src

*** =citeproc=

#+begin_src elisp :tangle packages.el
(package! citeproc)
#+end_src

*** =biblatex= processor

#+begin_src elisp
(use-package! oc-biblatex
  :after oc)
#+end_src

** =org-download=
*** installation

#+begin_src elisp :tangle packages.el
(package! org-download
  :recipe (:host github
           :repo "abo-abo/org-download"))
#+end_src

*** configuration

#+begin_src elisp
(use-package! org-download
  :after org
  :config
  (setq-default org-download-image-dir "./img/")
  (setq-default org-download-heading-lvl nil)
  (setq org-download-annotate-function (lambda (_link) ""))
  (map!
   :leader
   :prefix "j l"
   )
  )
#+END_SRC

*** custom function for download & rename

#+begin_src elisp
(defun qw/org-download-clipboard-and-rename ()
  (interactive)
  (org-download-clipboard)
  (org-download-rename-last-file)
  )
#+end_src

#+begin_src elisp
(map!
 :desc "download from clipboard and rename"
 :leader
 :prefix "j"
 "l" #'qw/org-download-clipboard-and-rename
 )
#+end_src

** =org-transclusion=
*** install
**** from GitHub

#+begin_src elisp :tangle packages.el
(package! org-transclusion
  :recipe (:host github
           :repo "nobiot/org-transclusion"
           :branch "main"
           :files ("*.el")))
#+end_src

**** from Melpa :inactive:

#+begin_src elisp :tangle no
(package! org-transclusion)
#+end_src

*** configure

#+begin_src elisp
(use-package! org-transclusion
  :after org
  :config
  (set-face-attribute
   'org-transclusion-fringe nil
   :foreground "#999966"
   :background "#999966")

  (set-face-attribute
   'org-transclusion-source-fringe nil
   :foreground "#999966"
   :background "#999966")

  (add-to-list 'org-transclusion-extensions 'org-transclusion-indent-mode)
  (require 'org-transclusion-indent-mode)
  )
#+end_src

*** keybindings

#+begin_src elisp
(map!
 :leader
 :prefix-map ("j t" . "org-transclusion")
 :desc "add" "a" #'org-transclusion-add
 :desc "remove" "r" #'org-transclusion-remove
 )
#+end_src

*** tweak to exclude first-level heading with =:only-contents=

#+begin_src elisp
(defvar org-transclusion-headline-ignored nil)

(defun org-transclusion-content-filter-org-only-contents (data)
  "Overriding the standard function to transclude subtrees only.
This works on :only-contents property"
  (cond
   ((and (eq (org-element-type data) 'headline)
          (not org-transclusion-headline-ignored))
     (progn
       (setq org-transclusion-headline-ignored t)
       nil))
   ((and (eq org-transclusion-headline-ignored t)
         (eq (org-element-type data) 'section))
    nil)
   ((and (eq org-transclusion-headline-ignored t)
         (eq (org-element-type data) 'headline))
    (org-element-extract-element data)
    data)
   (t
    data)))

(defun org-transclusion-reset-headline-ignored (&rest _)
  (setq org-transclusion-headline-ignored nil))

(advice-add #'org-transclusion-content-org-buffer-or-element
            :after #'org-transclusion-reset-headline-ignored)
#+end_src

** =org-tree-slide= :inactive:

#+begin_src elisp :tangle no
(after! org-tree-slide
  (advice-remove 'org-tree-slide--display-tree-with-narrow
                 #'+org-present--narrow-to-subtree-a)
  (advice-remove 'org-tree-slide--display-tree-with-narrow
                 #'+org-present--hide-first-heading-maybe-a)
  )
#+end_src

source for =advice-remove=: https://github.com/hlissner/doom-emacs/issues/4646
** =org-ql=

#+begin_src elisp :tangle packages.el
(package! org-ql)
#+end_src
** set apps for opening files
#+begin_src elisp
(setq org-file-apps
      '(
        (remote . emacs)
        (auto-mode . emacs)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . emacs)
        ))
#+end_src
** tag subtrees with =pos= or =:neg:=
*** =pos=

#+begin_src elisp
(defun qw/org-set-tags-pos ()
  (interactive)
  (org-set-tags ":pos:")
  ;; (+org/insert-item-below 1)
  )
#+end_src

#+begin_src elisp
(map!
 :desc "tag =pos="
 :leader
 :prefix "j"
 "p" #'qw/org-set-tags-pos
 )
#+end_src

*** =neg=

#+begin_src elisp
(defun qw/org-set-tags-neg ()
  (interactive)
  (org-set-tags ":neg:")
  ;; (+org/insert-item-below 1)
  )
#+end_src

#+begin_src elisp
(map!
 :desc "tag =neg="
 :leader
 :prefix "j"
 "n" #'qw/org-set-tags-neg
 )
#+end_src
** auto-save buffers

important for sync via Dropbox

#+begin_src elisp
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src
[[https://christiantietze.de/posts/2019/03/sync-emacs-org-files/][Sync Emacs Org Agenda Files via Dropbox Without Conflicts • Christian Tietze]]
** add link type for Apple Mail messages

uses [[id:ae8d035f-7308-435b-a624-2e979405456e][Alfred]] workflow: [[id:ccee3003-b071-4981-8b94-c5ae52cc87a5][copy Apple Mail ID to clipboard]]

#+begin_src elisp
(org-add-link-type "message"
 (lambda (id)
  (shell-command
   (concat "open message:" id))))
#+end_src
https://emacs.stackexchange.com/a/63982

* workspaces
#+begin_src elisp
(map!
 :leader
 :desc "switch workspace" "y" #'+workspace/switch-to)
#+end_src
* file management
** =dired=
*** hide details by default
#+BEGIN_SRC emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode))))
#+END_SRC

*** delete files to Trash
#+BEGIN_SRC emacs-lisp
(after! dired
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash"))
#+END_SRC

*** bindings for folders
#+BEGIN_SRC elisp
(map!
 :leader
 :prefix ("j d" . "dired")
 :desc "home" "h" (lambda () (interactive) (find-file "~"))
 :desc "Desktop" "d" (lambda () (interactive) (find-file "~/Desktop"))
 :desc "promo" "p" (lambda () (interactive) (find-file "~/promo"))
 :desc "Lehre" "l" (lambda () (interactive) (find-file "~/promo/lehre"))
 :desc "bib/pdfs" "b" (lambda () (interactive) (find-file "~/promo/bib/pdfs"))
 :desc "Volumes" "v" (lambda () (interactive) (find-file "/Volumes"))
 :desc "orgzly" "o" (lambda () (interactive) (find-file "~/Dropbox/orgzly"))
 :desc "Google Drive" "g" (lambda () (interactive) (find-file "~/Google Drive"))
 )
#+END_SRC
*** =dired-narrow=
**** install

#+begin_src elisp :tangle packages.el
(package! dired-narrow)
#+end_src

**** configure

#+BEGIN_SRC elisp
(map!
 :leader
 :prefix "j d"
 :desc "dired narrow" "n" #'dired-narrow)
#+END_SRC
*** =dired-subtree=

#+begin_src elisp :tangle packages.el
(package! dired-subtree)
#+end_src

#+begin_src elisp
(use-package! dired-subtree
  :after dired
  :config
  (define-key dired-mode-map (kbd "<tab>") 'dired-subtree-toggle))
#+end_src
*** =dired-sidebar=

#+begin_src elisp :tangle packages.el
(package! dired-sidebar)
#+end_src

#+begin_src lisp
(use-package! dired-sidebar
  :commands (dired-sidebar-toggle-sidebar))
#+end_src

** =dirvish=

#+begin_src elisp :tangle packages.el
(package! dirvish)
#+end_src
* version control
** =ediff=
*** unfold =org= files before diffing

#+begin_src elisp :results silent
(add-hook 'ediff-prepare-buffer-hook #'show-all)
#+end_src

* =anki-editor=
** install
#+begin_src elisp :tangle packages.el
(package! anki-editor)
#+end_src

** configure

#+begin_src elisp
(use-package anki-editor
  :after org
  :init
  (setq-default anki-editor-use-math-jax t)
  :config
  (map!
   :leader
   :prefix-map ("j a" . "anki-editor")
   :desc "insert note" "i" #'anki-editor-insert-note
   :desc "push notes" "P" #'anki-editor-push-notes :desc "mode" "m" #'anki-editor-mode)
  )
#+end_src

*** copy heading to front card

#+begin_src elisp
(fset 'anki-editor-copy-heading-to-front
      (kmacro-lambda-form [?y ?y ?j ?j ?p ?  ?m ?h ?j ?o] 0 "%d"))
#+end_src

#+begin_src elisp
(map!
 :leader
 :prefix "j a"
 :desc "copy heading to front" "h" #'anki-editor-copy-heading-to-front)
#+end_src

*** binding for pushing current note only

#+begin_src elisp
(defun q/anki-editor-push-note ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'anki-editor-push-notes)))
#+end_src

#+begin_src elisp
(map!
 :leader
 :prefix "j a"
 :desc "push note" "p" #'q/anki-editor-push-note)
#+end_src

* =deft=

#+begin_src elisp
(use-package! deft
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/roam/"))
#+end_src
* =LaTeX=
** set bibliography path

#+begin_src elisp
(setq reftex-default-bibliography "~/promo/bib/references.bib")
#+end_src

** set viewer app

#+BEGIN_SRC elisp
(setq +latex-viewers '(pdf-tools))
#+END_SRC

** folding
*** fold custom macros
:PROPERTIES:
:ID:       8ffa02ce-ba2f-4daf-9734-6086193aee93
:END:
source: https://emacs.stackexchange.com/a/33679/29471

#+BEGIN_SRC elisp
(after! latex
  (setq TeX-fold-macro-spec-list '(
    ("[f]" ("footnote"))
    ("[m]" ("marginpar"))
    ("[c]" ("cite"))
    ("[l]" ("label"))
    ("[r]" ("ref" "pageref" "eqref"))
    ("[i]" ("index" "glossary"))
    ("[1]:||*" ("item"))
    ("..." ("dots"))
    ("(C)" ("copyright"))
    ("(R)" ("textregistered"))
    ("TM" ("texttrademark"))
    (1 ("part" "chapter" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "part*" "chapter*" "section*" "subsection*" "subsubsection*" "paragraph*" "subparagraph*" "emph" "textit" "textsl" "textmd" "textrm" "textsf" "texttt" "textbf" "textsc" "textup"))
    ("{1}" ("cite" "parencite" "textcite" "se" "sw" "sps" "sbs" "hw" "qpar" "ol" "mn" "phnm" "mrphm" "enquote" "uline" "num" "textsuperscript"))
    ))
  )
#+END_SRC

** view =pdf= in new frame

- if only one frame is present: use new window
- if separate frame available: use separate frame

#+BEGIN_SRC elisp
(after! latex
  (defun framesMenus-display-buffer-use-some-frame (fun &rest args)
    "Use `display-buffer-use-some-frame' as `display-buffer-overriding-action'.
Then run FUN with ARGS."
    (let ((display-buffer-overriding-action '(display-buffer-use-some-frame)))
      (apply fun args)))

  (advice-add 'TeX-pdf-tools-sync-view :around #'framesMenus-display-buffer-use-some-frame)
  (advice-add 'pdf-sync-backward-search-mouse :around #'framesMenus-display-buffer-use-some-frame)
  )
#+END_SRC
https://emacs.stackexchange.com/questions/55395/auctex-and-pdf-tools-in-2-separate-frames-for-dual-monitor-setup

* emojis
#+begin_src elisp
(map!
 :leader
 :prefix "i"
 :desc "insert emoji" "e" #'emojify-insert-emoji
 )
#+end_src
* insert lorem ipsum

#+begin_src elisp :tangle packages.el
(package! lorem-ipsum)
#+end_src
* make shell commands use =~/.bashrc=

#+begin_src elisp
(setq shell-command-switch "-ic")
#+end_src
* open emails externally

#+begin_src elisp
(setq browse-url-mailto-function 'browse-url-generic)
(setq browse-url-generic-program "open")
#+end_src
* =csv-mode=

#+begin_src elisp :tangle packages.el
(package! csv-mode)
#+end_src
* =pdf-tools=
** config

#+BEGIN_SRC emacs-lisp
(use-package! pdf-tools
  :config
  (setq-default pdf-view-display-size 'fit-width)
  (setq pdf-annot-activate-created-annotations t))
#+END_SRC

** custom keybindings

#+BEGIN_SRC emacs-lisp
(map!
 :leader
 :prefix-map ("d". "pdf-tools")
 :desc "annotate w/ text" "t" #'pdf-annot-add-text-annotation
 :desc "annotate w/ highlight" "h" #'pdf-annot-add-highlight-markup-annotation
 :desc "annotate w/ underline" "u" #'pdf-annot-add-underline-markup-annotation
 :desc "annotate w/ strikeout" "s" #'pdf-annot-add-strikeout-markup-annotation
 :desc "delete annotation" "d" #'pdf-annot-delete
 :desc "jump back" "b" #'pdf-history-goto)
#+END_SRC
